{"slug":"print-diamond-pattern","title":"Print diamond pattern","trackId":4665,"tags":["C","C++","C#","Java","JavaScript","Kotlin","Ruby","TypeScript","Python","Scala","Dart","GO","PHP","R"],"contributors":["harshraj8843","Fukurokudzu","anandfresh","BarBronshtein","joao-vitor-souza","sam-mugo","AadityaDev","simranrangari","divyasakre","Mrunmayi28","vedantpople4","das-amit","Medmly20208"],"contentHtml":"<h2>Write a program to print diamond pattern</h2>\n<pre><code>Input  : 5\n\nOutput : \n    *\n   ***\n  *****\n *******\n*********\n *******\n  *****\n   ***\n    *\n</code></pre>\n<hr>\n<pre><code>#include&#x3C;stdio.h>\n\nvoid printDiamond(int n)\n{\n\tint space = n - 1;\n\n\tfor (int i = 0; i &#x3C; n; i++)\n\t{\n\t\tfor (int j = 0;j &#x3C; space; j++)\n\t\t\tprintf(\" \");\n\n\t\tfor (int j = 0;j &#x3C;= i; j++)\n\t\t\tprintf(\"* \");\n\n\t\tprintf(\"\\n\");\n\t\tspace--;\n\t}\n\n\tspace = 0;\n\n\tfor (int i = n; i > 0; i--)\n\t{\n\t\tfor (int j = 0; j &#x3C; space; j++)\n\t\t\tprintf(\" \");\n\n\t\tfor (int j = 0;j &#x3C; i;j++)\n\t\t\tprintf(\"* \");\n\n\t\tprintf(\"\\n\");\n\t\tspace++;\n\t}\n}\n\n// Driver code\nint main()\n{\n\tprintDiamond(5);\n\treturn 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;bits/stdc++.h>\nusing namespace std;\n\nvoid printDiamond(int n)\n{\n\tint space = n - 1;\n\n\tfor (int i = 0; i &#x3C; n; i++)\n\t{\n\n\t\tfor (int j = 0;j &#x3C; space; j++)\n\t\t\tcout &#x3C;&#x3C; \" \";\n\n\t\tfor (int j = 0; j &#x3C;= i; j++)\n\t\t\tcout &#x3C;&#x3C; \"* \";\n\n\t\tcout &#x3C;&#x3C; endl;\n\t\tspace--;\n\t}\n\n\tspace = 0;\n\n\tfor (int i = n; i > 0; i--)\n\t{\n\n\t\tfor (int j = 0; j &#x3C; space; j++)\n\t\t\tcout &#x3C;&#x3C; \" \";\n\n\t\tfor (int j = 0;j &#x3C; i;j++)\n\t\t\tcout &#x3C;&#x3C; \"* \";\n\n\t\tcout &#x3C;&#x3C; endl;\n\t\tspace++;\n\t}\n}\n\n// Driver code\nint main()\n{\n\tprintDiamond(5);\n\treturn 0;\n}\n</code></pre>\n<pre><code>using System;  \npublic class Exercise31  \n{  \n    public static void Main()\n{\n   int i,j,r;\n  \n   r = Convert.ToInt32(5);   \n   for(i=0;i&#x3C;=r;i++)\n   {\n     for(j=1;j&#x3C;=r-i;j++)\n     Console.Write(\" \");\n     for(j=1;j&#x3C;=2*i-1;j++)\n     Console.Write(\"*\");\n     Console.Write(\"\\n\");\n   }\n \n   for(i=r-1;i>=1;i--)\n   {\n     for(j=1;j&#x3C;=r-i;j++)\n     Console.Write(\" \");\n     for(j=1;j&#x3C;=2*i-1;j++)\n       Console.Write(\"*\");\n     Console.Write(\"\\n\");\n   }\n  }\n}\n</code></pre>\n<pre><code>class PrintDiamondPattern {\n  static void DiamondPattern(int n) {\n    int i, j, k;\n    // Print upper half of the diamond\n    for (i = 0; i &#x3C; n; i++) {\n      for (j = 0; j &#x3C; n - i; j++) {\n        System.out.print(\" \");\n      }\n      for (k = 0; k &#x3C; 2 * i + 1; k++) {\n        System.out.print(\"*\");\n      }\n      System.out.println();\n    }\n    // Print lower half of the diamond\n    for (i = n - 2; i >= 0; i--) {\n      for (j = 0; j &#x3C; n - i; j++) {\n        System.out.print(\" \");\n      }\n      for (k = 0; k &#x3C; 2 * i + 1; k++) {\n        System.out.print(\"*\");\n      }\n      System.out.println();\n    }\n  }\n  public static void main(String[] args) {\n    DiamondPattern(5);\n  }\n}\n</code></pre>\n<pre><code>const diamondPattern = (n) => {\n   let iteration = 0;\n   const construct = ['*'.repeat(2 * n - 1)];\n   n *= 2;\n   while ((n -= 2) > 0) {\n      const layer = ' '.repeat(++iteration) + '*'.repeat(n - 1);\n      construct.unshift(layer); \n      construct.push(layer);   \n   }\n   construct.forEach((pattern) => console.log(pattern)); \n}\n\ndiamondPattern(5);\n</code></pre>\n<pre><code>fun drawDiamond(rows: Int) {\n    var k = 0\n\n    for (i in 1..rows) {\n        for (space in 1..rows - i) {\n            print(\"  \")\n        }\n\n        while (k != 2 * i - 1) {\n            print(\"* \")\n            ++k\n        }\n\n        println()\n        k = 0\n    }\n\n    for (i in rows-1 downTo 1) {\n\n        for (space in 1..rows - i) {\n            print(\"  \")\n        }\n\n        for (j in i..2 * i - 1) {\n            print(\"* \")\n        }\n\n        for (j in 0..i - 1 - 1) {\n            print(\"* \")\n        }\n\n        println()\n    }\n}\n\nfun main() {\n    val num = 5\n    print(\"\\n\")\n    drawDiamond(num)\n}\n</code></pre>\n<pre><code>module PrintDiamond\n\n  def self.print(num)\n\n    1.upto(num) do |i|\n      draw(num, i)\n    end\n\n    (num-1).downto(1) do |i|\n      draw(num, i)\n    end\n\n    return\n  end\n\n  def self.draw(num, i)\n    asterisks = \"*\" * i\n    spaces = \" \" * (num - i)\n    puts spaces + asterisks + (asterisks[1..])\n  end\nend\n\nPrintDiamond.print(5)\n</code></pre>\n<pre><code>function printDiamond(num: number): void {\n\tlet str = '';\n\tif (!num) return console.log('');\n\tif (num &#x3C; 0) num = -num;\n\tif (num === 1) return console.log('*');\n\tstr += ' '.repeat(num) + '*\\n';\n\n\tfor (var i = 1; i &#x3C; num - 1; i++) {\n\t\tstr += ' '.repeat(num - i) + '*'.repeat(i * 2 + 1) + '\\n';\n\t}\n\n\tstr += ' '.repeat(num - i) + '*'.repeat(i * 2 + 1) + '\\n';\n\n\tfor (let j = i - 1; j > 0; j--) {\n\t\tstr += ' '.repeat(num - j) + '*'.repeat(j * 2 + 1) + '\\n';\n\t}\n\n\tstr += ' '.repeat(num) + '*';\n\tconsole.log(str);\n}\nprintDiamond(5);\n</code></pre>\n<pre><code>def printDiamondPattern(number: int) -> None:\n    \"\"\"\n    print Diamond Pattern\n    Arguments:\n        number:int\n    Returns:\n        None\n    \"\"\"\n\n    #  print the first half of the pattern\n\n    NumberOfSpaces = number\n    NumberOfStars = 1\n    for i in range(0, number):\n        print(\" \" * NumberOfSpaces, end=f\"{'*'*NumberOfStars}\\n\")\n        NumberOfSpaces = NumberOfSpaces - 1\n        NumberOfStars = NumberOfStars + 2\n\n    #  print the second half\n\n    NumberOfSpaces = 2\n    NumberOfStars = NumberOfStars - 4\n\n    for i in range(0, number - 1):\n        print(\" \" * NumberOfSpaces, end=f\"{'*'*NumberOfStars}\\n\")\n        NumberOfSpaces = NumberOfSpaces + 1\n        NumberOfStars = NumberOfStars - 2\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"Type A number : \"))\n    printDiamondPattern(number)\n\n\n# contributed by MedMly20208 Mohamed Moulay\n</code></pre>\n<pre><code>object printDiamondPattern {\n    def diammondPatternIncrementByTwo(n: Int): Unit = {\n        // print upper half of the diamond\n        for (i &#x3C;- 1 to n) {\n            for (j &#x3C;- 1 to n - i) print(\"  \")\n            for (j &#x3C;- 1 until 2 * i) print(\"* \")\n            println()\n        }\n        // print lower half of the diamond\n        for (i &#x3C;- n - 1 to 1 by -1) {\n            for (j &#x3C;- 1 to n - i) print(\"  \")\n            for (j &#x3C;- 1 until 2 * i) print(\"* \")\n            println()\n        }\n    }\n    def main(args: Array[String]): Unit = {\n    val n = 5\n    diammondPatternIncrementByTwo(n)\n\n    }\n  \n}\n</code></pre>\n<pre><code>import 'dart:io';\n\nvoid main() {\n  int i, j, k, m = 1;\n  \n  print(\"Enter the number : \");\n  int? n = int.parse(stdin.readLineSync()!);\n  \n  print(\"$n\");\n  for ( i =1; i &#x3C;= n; i++) {\n    for (j = 1; j &#x3C;= n - i; j++) {\n      stdout.write(\" \");\n    }\n    for (k = 1; k &#x3C;= ( 2 * i - 1); k++) {\n      stdout.write(\"*\");\n    }\n    stdout.writeln(\"\");\n  }\n  \n  for ( i = n-1; i >= 1; i--) {\n    for ( j = 1; j &#x3C;= m; j++) {\n      stdout.write(\" \");\n    }\n    for (k = 1; k &#x3C;= ( 2 * i - 1); k++) {\n      stdout.write(\"*\");\n    }\n    m++;  \n    stdout.writeln(\"\");\n  }\n}\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i, j, k int\n\ti = 1\n\tj = 1\n\tk = 1\n\tvar row int\n\trow = 5\n\tfor i = 1; i &#x3C;= row; i++ {\n\t\tfor j = 1; j &#x3C;= row-i; j++ {\n\t\t\tfmt.Printf(\" \")\n\t\t}\n\t\tfor k = 1; k &#x3C;= i*2-1; k++ {\n\t\t\tfmt.Printf(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tfor i = row - 1; i > 0; i-- {\n\t\tfor j = 1; j &#x3C;= row-i; j++ {\n\t\t\tfmt.Printf(\" \")\n\t\t}\n\t\tfor k = 1; k &#x3C;= i*2-1; k++ {\n\t\t\tfmt.Printf(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction diamondPattern($n) {\necho \"&#x3C;pre>\";\nfor ($i = 1; $i &#x3C; $n; $i++) {\n    for ($j = $i; $j &#x3C; $n; $j++)\n        echo \"&#x26;nbsp;&#x26;nbsp;\";\n    for ($j = 2 * $i - 1; $j > 0; $j--)\n        echo (\"&#x26;nbsp;*\");\n    echo \"&#x3C;br>\";\n}\n\nfor ($i = $n; $i > 0; $i--) {\n    for ($j = $n - $i; $j > 0; $j--)\n        echo \"&#x26;nbsp;&#x26;nbsp;\";\n    for ($j = 2 * $i - 1; $j > 0; $j--)\n        echo (\"&#x26;nbsp;*\");\n    echo \"&#x3C;br>\";\n}\necho \"&#x3C;/pre>\";\n}\n\ndiamondPattern(5);\n\n?>\n</code></pre>\n<pre><code>diamond &#x3C;- function(max) {\n\n    # Upper triangle\n    space &#x3C;- max - 1\n    for (i in 0:(max - 1)) {\n        for (j in 0:space) cat(\" \")\n        for (j in 0:i) cat(\"* \")\n        cat(\"\\n\")\n        space &#x3C;- space - 1\n    }\n\n    # Lower triangle\n    space = 1;\n    for (i in (max - 1):1) {\n        for (j in 0:space) cat(\" \")\n        for (j in 0:(i - 1)) cat(\"* \")\n        cat(\"\\n\")\n        space &#x3C;- space + 1\n    }\n}\ndiamond(5)\n</code></pre>\n","markdown":"\n## Write a program to print diamond pattern\n\n```txt\nInput  : 5\n\nOutput : \n    *\n   ***\n  *****\n *******\n*********\n *******\n  *****\n   ***\n    *\n```\n\n---\n\n<CodeBlock slug=\"print-diamond-pattern\" >\n\n```c\n#include<stdio.h>\n\nvoid printDiamond(int n)\n{\n\tint space = n - 1;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0;j < space; j++)\n\t\t\tprintf(\" \");\n\n\t\tfor (int j = 0;j <= i; j++)\n\t\t\tprintf(\"* \");\n\n\t\tprintf(\"\\n\");\n\t\tspace--;\n\t}\n\n\tspace = 0;\n\n\tfor (int i = n; i > 0; i--)\n\t{\n\t\tfor (int j = 0; j < space; j++)\n\t\t\tprintf(\" \");\n\n\t\tfor (int j = 0;j < i;j++)\n\t\t\tprintf(\"* \");\n\n\t\tprintf(\"\\n\");\n\t\tspace++;\n\t}\n}\n\n// Driver code\nint main()\n{\n\tprintDiamond(5);\n\treturn 0;\n}\n```\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nvoid printDiamond(int n)\n{\n\tint space = n - 1;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\n\t\tfor (int j = 0;j < space; j++)\n\t\t\tcout << \" \";\n\n\t\tfor (int j = 0; j <= i; j++)\n\t\t\tcout << \"* \";\n\n\t\tcout << endl;\n\t\tspace--;\n\t}\n\n\tspace = 0;\n\n\tfor (int i = n; i > 0; i--)\n\t{\n\n\t\tfor (int j = 0; j < space; j++)\n\t\t\tcout << \" \";\n\n\t\tfor (int j = 0;j < i;j++)\n\t\t\tcout << \"* \";\n\n\t\tcout << endl;\n\t\tspace++;\n\t}\n}\n\n// Driver code\nint main()\n{\n\tprintDiamond(5);\n\treturn 0;\n}\n```\n\n```cs\nusing System;  \npublic class Exercise31  \n{  \n    public static void Main()\n{\n   int i,j,r;\n  \n   r = Convert.ToInt32(5);   \n   for(i=0;i<=r;i++)\n   {\n     for(j=1;j<=r-i;j++)\n     Console.Write(\" \");\n     for(j=1;j<=2*i-1;j++)\n     Console.Write(\"*\");\n     Console.Write(\"\\n\");\n   }\n \n   for(i=r-1;i>=1;i--)\n   {\n     for(j=1;j<=r-i;j++)\n     Console.Write(\" \");\n     for(j=1;j<=2*i-1;j++)\n       Console.Write(\"*\");\n     Console.Write(\"\\n\");\n   }\n  }\n}\n```\n\n```java\nclass PrintDiamondPattern {\n  static void DiamondPattern(int n) {\n    int i, j, k;\n    // Print upper half of the diamond\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n - i; j++) {\n        System.out.print(\" \");\n      }\n      for (k = 0; k < 2 * i + 1; k++) {\n        System.out.print(\"*\");\n      }\n      System.out.println();\n    }\n    // Print lower half of the diamond\n    for (i = n - 2; i >= 0; i--) {\n      for (j = 0; j < n - i; j++) {\n        System.out.print(\" \");\n      }\n      for (k = 0; k < 2 * i + 1; k++) {\n        System.out.print(\"*\");\n      }\n      System.out.println();\n    }\n  }\n  public static void main(String[] args) {\n    DiamondPattern(5);\n  }\n}\n```\n\n```js\nconst diamondPattern = (n) => {\n   let iteration = 0;\n   const construct = ['*'.repeat(2 * n - 1)];\n   n *= 2;\n   while ((n -= 2) > 0) {\n      const layer = ' '.repeat(++iteration) + '*'.repeat(n - 1);\n      construct.unshift(layer); \n      construct.push(layer);   \n   }\n   construct.forEach((pattern) => console.log(pattern)); \n}\n\ndiamondPattern(5);\n```\n\n```kt\nfun drawDiamond(rows: Int) {\n    var k = 0\n\n    for (i in 1..rows) {\n        for (space in 1..rows - i) {\n            print(\"  \")\n        }\n\n        while (k != 2 * i - 1) {\n            print(\"* \")\n            ++k\n        }\n\n        println()\n        k = 0\n    }\n\n    for (i in rows-1 downTo 1) {\n\n        for (space in 1..rows - i) {\n            print(\"  \")\n        }\n\n        for (j in i..2 * i - 1) {\n            print(\"* \")\n        }\n\n        for (j in 0..i - 1 - 1) {\n            print(\"* \")\n        }\n\n        println()\n    }\n}\n\nfun main() {\n    val num = 5\n    print(\"\\n\")\n    drawDiamond(num)\n}\n```\n\n```rb\nmodule PrintDiamond\n\n  def self.print(num)\n\n    1.upto(num) do |i|\n      draw(num, i)\n    end\n\n    (num-1).downto(1) do |i|\n      draw(num, i)\n    end\n\n    return\n  end\n\n  def self.draw(num, i)\n    asterisks = \"*\" * i\n    spaces = \" \" * (num - i)\n    puts spaces + asterisks + (asterisks[1..])\n  end\nend\n\nPrintDiamond.print(5)\n```\n\n```ts\nfunction printDiamond(num: number): void {\n\tlet str = '';\n\tif (!num) return console.log('');\n\tif (num < 0) num = -num;\n\tif (num === 1) return console.log('*');\n\tstr += ' '.repeat(num) + '*\\n';\n\n\tfor (var i = 1; i < num - 1; i++) {\n\t\tstr += ' '.repeat(num - i) + '*'.repeat(i * 2 + 1) + '\\n';\n\t}\n\n\tstr += ' '.repeat(num - i) + '*'.repeat(i * 2 + 1) + '\\n';\n\n\tfor (let j = i - 1; j > 0; j--) {\n\t\tstr += ' '.repeat(num - j) + '*'.repeat(j * 2 + 1) + '\\n';\n\t}\n\n\tstr += ' '.repeat(num) + '*';\n\tconsole.log(str);\n}\nprintDiamond(5);\n```\n\n```py\ndef printDiamondPattern(number: int) -> None:\n    \"\"\"\n    print Diamond Pattern\n    Arguments:\n        number:int\n    Returns:\n        None\n    \"\"\"\n\n    #  print the first half of the pattern\n\n    NumberOfSpaces = number\n    NumberOfStars = 1\n    for i in range(0, number):\n        print(\" \" * NumberOfSpaces, end=f\"{'*'*NumberOfStars}\\n\")\n        NumberOfSpaces = NumberOfSpaces - 1\n        NumberOfStars = NumberOfStars + 2\n\n    #  print the second half\n\n    NumberOfSpaces = 2\n    NumberOfStars = NumberOfStars - 4\n\n    for i in range(0, number - 1):\n        print(\" \" * NumberOfSpaces, end=f\"{'*'*NumberOfStars}\\n\")\n        NumberOfSpaces = NumberOfSpaces + 1\n        NumberOfStars = NumberOfStars - 2\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"Type A number : \"))\n    printDiamondPattern(number)\n\n\n# contributed by MedMly20208 Mohamed Moulay\n```\n\n```scala\nobject printDiamondPattern {\n    def diammondPatternIncrementByTwo(n: Int): Unit = {\n        // print upper half of the diamond\n        for (i <- 1 to n) {\n            for (j <- 1 to n - i) print(\"  \")\n            for (j <- 1 until 2 * i) print(\"* \")\n            println()\n        }\n        // print lower half of the diamond\n        for (i <- n - 1 to 1 by -1) {\n            for (j <- 1 to n - i) print(\"  \")\n            for (j <- 1 until 2 * i) print(\"* \")\n            println()\n        }\n    }\n    def main(args: Array[String]): Unit = {\n    val n = 5\n    diammondPatternIncrementByTwo(n)\n\n    }\n  \n}\n```\n\n```dart\nimport 'dart:io';\n\nvoid main() {\n  int i, j, k, m = 1;\n  \n  print(\"Enter the number : \");\n  int? n = int.parse(stdin.readLineSync()!);\n  \n  print(\"$n\");\n  for ( i =1; i <= n; i++) {\n    for (j = 1; j <= n - i; j++) {\n      stdout.write(\" \");\n    }\n    for (k = 1; k <= ( 2 * i - 1); k++) {\n      stdout.write(\"*\");\n    }\n    stdout.writeln(\"\");\n  }\n  \n  for ( i = n-1; i >= 1; i--) {\n    for ( j = 1; j <= m; j++) {\n      stdout.write(\" \");\n    }\n    for (k = 1; k <= ( 2 * i - 1); k++) {\n      stdout.write(\"*\");\n    }\n    m++;  \n    stdout.writeln(\"\");\n  }\n}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i, j, k int\n\ti = 1\n\tj = 1\n\tk = 1\n\tvar row int\n\trow = 5\n\tfor i = 1; i <= row; i++ {\n\t\tfor j = 1; j <= row-i; j++ {\n\t\t\tfmt.Printf(\" \")\n\t\t}\n\t\tfor k = 1; k <= i*2-1; k++ {\n\t\t\tfmt.Printf(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tfor i = row - 1; i > 0; i-- {\n\t\tfor j = 1; j <= row-i; j++ {\n\t\t\tfmt.Printf(\" \")\n\t\t}\n\t\tfor k = 1; k <= i*2-1; k++ {\n\t\t\tfmt.Printf(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n```\n\n```php\n<?php\n\nfunction diamondPattern($n) {\necho \"<pre>\";\nfor ($i = 1; $i < $n; $i++) {\n    for ($j = $i; $j < $n; $j++)\n        echo \"&nbsp;&nbsp;\";\n    for ($j = 2 * $i - 1; $j > 0; $j--)\n        echo (\"&nbsp;*\");\n    echo \"<br>\";\n}\n\nfor ($i = $n; $i > 0; $i--) {\n    for ($j = $n - $i; $j > 0; $j--)\n        echo \"&nbsp;&nbsp;\";\n    for ($j = 2 * $i - 1; $j > 0; $j--)\n        echo (\"&nbsp;*\");\n    echo \"<br>\";\n}\necho \"</pre>\";\n}\n\ndiamondPattern(5);\n\n?>\n```\n\n```r\ndiamond <- function(max) {\n\n    # Upper triangle\n    space <- max - 1\n    for (i in 0:(max - 1)) {\n        for (j in 0:space) cat(\" \")\n        for (j in 0:i) cat(\"* \")\n        cat(\"\\n\")\n        space <- space - 1\n    }\n\n    # Lower triangle\n    space = 1;\n    for (i in (max - 1):1) {\n        for (j in 0:space) cat(\" \")\n        for (j in 0:(i - 1)) cat(\"* \")\n        cat(\"\\n\")\n        space <- space + 1\n    }\n}\ndiamond(5)\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-02-14T05:45:09Z"}