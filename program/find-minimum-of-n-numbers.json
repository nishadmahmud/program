{"slug":"find-minimum-of-n-numbers","title":"Find minimum of n numbers","trackId":3750,"tags":["C","C++","Java","JavaScript","Kotlin","Ruby","TypeScript","Python","GO","PHP","Rust"],"contributors":["sancoLgates","esivakumar18","harshraj8843","rafaover","deveshpandee","vfon98","amiqyolo","grraghav120","ba-p","gilazani"],"contentHtml":"<h2>Write a program to find minimum of n numbers</h2>\n<pre><code>Input  : 10 20 30 40 50\nOutput : 10\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint findMinimumOfNNumbers(int* arr, int n)\n{\n\tint min = arr[0], i;\n\t//in defualt the first num in arr is the minimum\n\n\tfor(i = 1; i &#x3C; n ; i++)\n\t{\n\t\tif (arr[i] &#x3C; min)\n\t\t{\n\t\t\tmin = arr[i];\n\t\t}\n\t}\n\treturn (min);\n}\n</code></pre>\n<pre><code>#include&#x3C;iostream>\nusing namespace std;\n\nint main(){\n    int min,k;\n    cin>>min;\n    while(cin>>k){\n        if(k&#x3C;min){\n            min=k;\n        }\n    }\n    cout&#x3C;&#x3C;min;\n}\n</code></pre>\n<pre><code>import java.util.*;\n\npublic class FindMinimumOfNNumbers {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter number of elements in the array:\");\n    int n = sc.nextInt();\n    int[] arr = new int[n];\n\n    System.out.println(\"Enter elements of array:\");\n    for (int i = 0; i &#x3C; n; i++) {\n      arr[i] = sc.nextInt();\n    }\n\n    int mini = Integer.MAX_VALUE;\n    for (int i = 0; i &#x3C; n; i++) {\n      if (arr[i] &#x3C; mini) mini = arr[i];\n    }\n\n    System.out.println(\"Minimum value: \" + mini);\n  }\n}\n</code></pre>\n<pre><code>/**\n * function to find minimum of n numbers\n * @param {Array.&#x3C;number>} inputArray - The input array\n * @returns {number|string} - The minimum value from inputArray or the error message\n */\n const findMinimumOfNNumbers = (inputArray) => {\n  if (!Array.isArray(inputArray)) {\n    return 'Error: Input should be array';\n  }\n\n  if (inputArray.length === 0) {\n    return 'Error: Input array should not be empty';\n  }\n\n  // Ignore invalid numbers from input array\n  const validNumbers = inputArray.filter(input => Number.isFinite(input));\n\n  if (validNumbers.length === 0) {\n    return 'Error: Input array should have at least one valid number';\n  }\n\n  let minimumValue = validNumbers[0];\n\n  validNumbers.forEach(number => {\n    if (number &#x3C; minimumValue) {\n      minimumValue = number;\n    }\n  });\n\n  return minimumValue;\n}\n\nconsole.log(findMinimumOfNNumbers('random string'));\nconsole.log(findMinimumOfNNumbers([]));\nconsole.log(findMinimumOfNNumbers(['10']));\nconsole.log(findMinimumOfNNumbers([10]));\nconsole.log(findMinimumOfNNumbers([10, '20', undefined, 100, NaN]));\nconsole.log(findMinimumOfNNumbers([10, -20, 50, 99]));\n</code></pre>\n<pre><code>fun main() {\n   val n = arrayOf(10, 20, 30, 40, 50)\n   findMiniOfNumber(n)\n}\n\nfun findMiniOfNumber(arr: Array&#x3C;Int>) {\n    var min = Int.MAX_VALUE\n    for (i in arr) {\n        min = min.coerceAtMost(i)\n    }\n    println(min)\n}\n</code></pre>\n<pre><code>def find_minimum_of_n_numbers(numbers)\n  sorted_numbers = numbers.sort\n  # many methods to get it:\n  # sorted_numbers[0]\n  # sorted_numbers.first\n  sorted_numbers.min\nend\n\nputs find_minimum_of_n_numbers([300, 50, 10, 2, 20, 34, 45])\n</code></pre>\n<pre><code>function findMinimumOfNNumbers(...args: Array&#x3C;number>) {\n    const numbers = [...args]\n    \n    const sortedNumbers = numbers.sort((a, b) => a - b);\n \n    return sortedNumbers[0];\n}\n</code></pre>\n<pre><code>def find_minimum_of_n_numbers(numbers):\n    sorted_nums = sorted(numbers)\n    return sorted_nums[0]\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tarr := [...]int{10, 20, 30, 40, 50}\n\tmin_num := arr[0]\n\tfor _, value := range arr {\n\t\tif (value &#x3C; min_num) {\n\t\t\tmin_num = value\n\t\t}\n\t}\n\tfmt.Println(min_num)\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\n\techo min(10, 20, 30, 40, 50);\n?>\n</code></pre>\n<pre><code>fn find_minimum_of_n_numbers(nums: &#x26;mut [i32]) -> i32 {\n    nums.sort();\n    return nums[0];\n}\n\n// testing\nfn main() {\n    let mut arr: [i32; 4] = [1, 5, 3, 6];\n    let rs = find_minimum_of_n_numbers(&#x26;mut arr);\n    println!(\"Minimum of n numbers is {:?}\", rs);\n}\n</code></pre>\n","markdown":"\n## Write a program to find minimum of n numbers\n\n```txt\nInput  : 10 20 30 40 50\nOutput : 10\n```\n\n---\n\n<CodeBlock slug=\"find-minimum-of-n-numbers\" >\n\n```c\n#include <stdio.h>\n\nint findMinimumOfNNumbers(int* arr, int n)\n{\n\tint min = arr[0], i;\n\t//in defualt the first num in arr is the minimum\n\n\tfor(i = 1; i < n ; i++)\n\t{\n\t\tif (arr[i] < min)\n\t\t{\n\t\t\tmin = arr[i];\n\t\t}\n\t}\n\treturn (min);\n}\n```\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main(){\n    int min,k;\n    cin>>min;\n    while(cin>>k){\n        if(k<min){\n            min=k;\n        }\n    }\n    cout<<min;\n}\n```\n\n```java\nimport java.util.*;\n\npublic class FindMinimumOfNNumbers {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter number of elements in the array:\");\n    int n = sc.nextInt();\n    int[] arr = new int[n];\n\n    System.out.println(\"Enter elements of array:\");\n    for (int i = 0; i < n; i++) {\n      arr[i] = sc.nextInt();\n    }\n\n    int mini = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      if (arr[i] < mini) mini = arr[i];\n    }\n\n    System.out.println(\"Minimum value: \" + mini);\n  }\n}\n```\n\n```js\n/**\n * function to find minimum of n numbers\n * @param {Array.<number>} inputArray - The input array\n * @returns {number|string} - The minimum value from inputArray or the error message\n */\n const findMinimumOfNNumbers = (inputArray) => {\n  if (!Array.isArray(inputArray)) {\n    return 'Error: Input should be array';\n  }\n\n  if (inputArray.length === 0) {\n    return 'Error: Input array should not be empty';\n  }\n\n  // Ignore invalid numbers from input array\n  const validNumbers = inputArray.filter(input => Number.isFinite(input));\n\n  if (validNumbers.length === 0) {\n    return 'Error: Input array should have at least one valid number';\n  }\n\n  let minimumValue = validNumbers[0];\n\n  validNumbers.forEach(number => {\n    if (number < minimumValue) {\n      minimumValue = number;\n    }\n  });\n\n  return minimumValue;\n}\n\nconsole.log(findMinimumOfNNumbers('random string'));\nconsole.log(findMinimumOfNNumbers([]));\nconsole.log(findMinimumOfNNumbers(['10']));\nconsole.log(findMinimumOfNNumbers([10]));\nconsole.log(findMinimumOfNNumbers([10, '20', undefined, 100, NaN]));\nconsole.log(findMinimumOfNNumbers([10, -20, 50, 99]));\n```\n\n```kt\nfun main() {\n   val n = arrayOf(10, 20, 30, 40, 50)\n   findMiniOfNumber(n)\n}\n\nfun findMiniOfNumber(arr: Array<Int>) {\n    var min = Int.MAX_VALUE\n    for (i in arr) {\n        min = min.coerceAtMost(i)\n    }\n    println(min)\n}\n```\n\n```rb\ndef find_minimum_of_n_numbers(numbers)\n  sorted_numbers = numbers.sort\n  # many methods to get it:\n  # sorted_numbers[0]\n  # sorted_numbers.first\n  sorted_numbers.min\nend\n\nputs find_minimum_of_n_numbers([300, 50, 10, 2, 20, 34, 45])\n```\n\n```ts\nfunction findMinimumOfNNumbers(...args: Array<number>) {\n    const numbers = [...args]\n    \n    const sortedNumbers = numbers.sort((a, b) => a - b);\n \n    return sortedNumbers[0];\n}\n```\n\n```py\ndef find_minimum_of_n_numbers(numbers):\n    sorted_nums = sorted(numbers)\n    return sorted_nums[0]\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tarr := [...]int{10, 20, 30, 40, 50}\n\tmin_num := arr[0]\n\tfor _, value := range arr {\n\t\tif (value < min_num) {\n\t\t\tmin_num = value\n\t\t}\n\t}\n\tfmt.Println(min_num)\n}\n```\n\n```php\n<?php\n\n\techo min(10, 20, 30, 40, 50);\n?>\n```\n\n```rs\nfn find_minimum_of_n_numbers(nums: &mut [i32]) -> i32 {\n    nums.sort();\n    return nums[0];\n}\n\n// testing\nfn main() {\n    let mut arr: [i32; 4] = [1, 5, 3, 6];\n    let rs = find_minimum_of_n_numbers(&mut arr);\n    println!(\"Minimum of n numbers is {:?}\", rs);\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-05T09:31:07Z"}