{"slug":"find-power-of-a-number-by-recursion","title":"Find power of a number by recursion","trackId":531,"tags":["C","C++","Java","JavaScript","Ruby","TypeScript","Python","PHP"],"contributors":["anandfresh","Osher160","harshraj8843","Ipankaj07","anastazir","RShalman","AthiraKadampatta"],"contentHtml":"<h2>Write a program to find power of a number by recursion</h2>\n<p>Power of a number is calculated by multiplying the number by itself for the given number of times. For example, 2^3 = 2 * 2 * 2 = 8.</p>\n<p>Power of a number can be calculated by recursion. The formula is:</p>\n<pre><code>x^n = x * x^{n-1}\n</code></pre>\n<pre><code>Input  : 2 3\r\nOutput : 8\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h> /* printf, scanf */\n\n/*assuming that num and exponent are positive and natural*/\nint PowerOf(int num,int expo);\n\nint main()\n{\n    int num =0;\n    int expo =0;\n\n    if(scanf(\"%d %d\",&#x26;num, &#x26;expo) != 2)\n    {\n        return -1;\n    }\n\n    printf(\"%d\",PowerOf(num,expo));\n\n    return 0;\n\n}\n\nint PowerOf(int num,int expo)\n{\n    if(expo == 1)\n    {\n        return num;\n    }\n\n    return PowerOf(num,expo -1) * num;\n}\n</code></pre>\n<pre><code>#include&#x3C;iostream> //cout, cin\n\n//finding the power of a number, assuming that the base and exponent are positive and natural\nint PowerOfNumRec(int base,int expo);\n\nint main()\n{\n    int base = 0;\n    int expo = 0;\n\n    std::cout &#x3C;&#x3C; \"please enter base number and than exponent number:\" &#x3C;&#x3C; std::endl;\n\n    std::cin >> base >> expo;\n\n    std::cout &#x3C;&#x3C; PowerOfNumRec(base,expo) &#x3C;&#x3C; std::endl;\n}\n\n\nint PowerOfNumRec(int base,int expo)\n{\n    if(expo == 1)\n    {\n        return base;\n    }\n\n    return base * PowerOfNumRec(base,expo - 1);\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\nclass FindPowerOfANumberByRecursion {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number: \");\n        int number = scanner.nextInt();\n        System.out.print(\"Enter the power: \");\n        int power = scanner.nextInt();\n\n        if (power &#x3C; 0 || number &#x3C; 0) {\n            System.out.println(\"Invalid input/Power can't be negative\");\n        } else {\n            System.out.println(number + \"^\" + power + \" = \" + findPower(number, power));\n        }\n    }\n\n    private static long findPower(int number, int power) {\n        if (power == 0) {\n            return 1;\n        } else {\n            return number * findPower(number, power - 1);\n        }\n    }\n}\n</code></pre>\n<pre><code>export function findPowerOfANumberByRecursion(number, power, poweredNumber = number, counter = 1) {\n    if(power === 0) return 1\n\n    if(power === counter) return poweredNumber\n\n    return findPowerOfANumberByRecursion(number, power, poweredNumber * number,  ++counter)\n}\n</code></pre>\n<pre><code># frozen_string_literal: true\n\nputs 'This program calculates the power of a number.'\nprint 'Enter the base number: '\nnum1 = gets.chomp.to_i\nprint 'Enter the power or exponent: '\nnum2 = gets.chomp.to_i\n\ndef power(num1, num2)\n  return 'Power/exponent cannot be negative' if num2.negative?\n  return 1 if num2.zero?\n\n  num1 * power(num1, num2 - 1)\nend\n\nputs \"#{num1}^#{num2} = #{power(num1, num2)}\"\n</code></pre>\n<pre><code>const number = 2;\nconst pow = 3;\n\nfunction power(num: number, exponent: number): number {\n    return exponent == 0 ? 1 : num * power(num, exponent-1);\n};\n\nconsole.log(\"Number :\", number);\nconsole.log(\"Power :\", pow);\n\nconsole.log(\"Output :\", power(number, pow));\n</code></pre>\n<pre><code>def power(base, exp):\n    if exp == 1:\n        return base\n    if exp != 1:\n        return base * power(base, exp - 1)\n\n\nbase = int(input(\"Enter base  : \"))\npow = int(input(\"Enter power : \"))\n\nprint(\"\\nResult :\", power(base, pow))\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction power($num, $pow){\n    if($pow === 0) return 1;\n    return $num * power($num, $pow-1);\n}\n\nprint power(2,3)\n\n?>\n</code></pre>\n","markdown":"\r\n## Write a program to find power of a number by recursion\r\n\r\nPower of a number is calculated by multiplying the number by itself for the given number of times. For example, 2^3 = 2 * 2 * 2 = 8.\r\n\r\nPower of a number can be calculated by recursion. The formula is:\r\n\r\n```math\r\nx^n = x * x^{n-1}\r\n```\r\n\r\n```txt\r\nInput  : 2 3\r\nOutput : 8\r\n```\r\n\r\n---\n\n<CodeBlock slug=\"find-power-of-a-number-by-recursion\" >\n\n```c\n#include <stdio.h> /* printf, scanf */\n\n/*assuming that num and exponent are positive and natural*/\nint PowerOf(int num,int expo);\n\nint main()\n{\n    int num =0;\n    int expo =0;\n\n    if(scanf(\"%d %d\",&num, &expo) != 2)\n    {\n        return -1;\n    }\n\n    printf(\"%d\",PowerOf(num,expo));\n\n    return 0;\n\n}\n\nint PowerOf(int num,int expo)\n{\n    if(expo == 1)\n    {\n        return num;\n    }\n\n    return PowerOf(num,expo -1) * num;\n}\n```\n\n```cpp\n#include<iostream> //cout, cin\n\n//finding the power of a number, assuming that the base and exponent are positive and natural\nint PowerOfNumRec(int base,int expo);\n\nint main()\n{\n    int base = 0;\n    int expo = 0;\n\n    std::cout << \"please enter base number and than exponent number:\" << std::endl;\n\n    std::cin >> base >> expo;\n\n    std::cout << PowerOfNumRec(base,expo) << std::endl;\n}\n\n\nint PowerOfNumRec(int base,int expo)\n{\n    if(expo == 1)\n    {\n        return base;\n    }\n\n    return base * PowerOfNumRec(base,expo - 1);\n}\n```\n\n```java\nimport java.util.Scanner;\n\nclass FindPowerOfANumberByRecursion {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number: \");\n        int number = scanner.nextInt();\n        System.out.print(\"Enter the power: \");\n        int power = scanner.nextInt();\n\n        if (power < 0 || number < 0) {\n            System.out.println(\"Invalid input/Power can't be negative\");\n        } else {\n            System.out.println(number + \"^\" + power + \" = \" + findPower(number, power));\n        }\n    }\n\n    private static long findPower(int number, int power) {\n        if (power == 0) {\n            return 1;\n        } else {\n            return number * findPower(number, power - 1);\n        }\n    }\n}\n```\n\n```js\nexport function findPowerOfANumberByRecursion(number, power, poweredNumber = number, counter = 1) {\n    if(power === 0) return 1\n\n    if(power === counter) return poweredNumber\n\n    return findPowerOfANumberByRecursion(number, power, poweredNumber * number,  ++counter)\n}\n```\n\n```rb\n# frozen_string_literal: true\n\nputs 'This program calculates the power of a number.'\nprint 'Enter the base number: '\nnum1 = gets.chomp.to_i\nprint 'Enter the power or exponent: '\nnum2 = gets.chomp.to_i\n\ndef power(num1, num2)\n  return 'Power/exponent cannot be negative' if num2.negative?\n  return 1 if num2.zero?\n\n  num1 * power(num1, num2 - 1)\nend\n\nputs \"#{num1}^#{num2} = #{power(num1, num2)}\"\n```\n\n```ts\nconst number = 2;\nconst pow = 3;\n\nfunction power(num: number, exponent: number): number {\n    return exponent == 0 ? 1 : num * power(num, exponent-1);\n};\n\nconsole.log(\"Number :\", number);\nconsole.log(\"Power :\", pow);\n\nconsole.log(\"Output :\", power(number, pow));\n```\n\n```py\ndef power(base, exp):\n    if exp == 1:\n        return base\n    if exp != 1:\n        return base * power(base, exp - 1)\n\n\nbase = int(input(\"Enter base  : \"))\npow = int(input(\"Enter power : \"))\n\nprint(\"\\nResult :\", power(base, pow))\n```\n\n```php\n<?php\n\nfunction power($num, $pow){\n    if($pow === 0) return 1;\n    return $num * power($num, $pow-1);\n}\n\nprint power(2,3)\n\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-03T17:06:48Z"}