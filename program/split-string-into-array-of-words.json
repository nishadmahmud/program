{"slug":"split-string-into-array-of-words","title":"Split string into array of words","trackId":5638,"tags":["C","C++","C#","F#","Java","JavaScript","Kotlin","Ruby","Swift","TypeScript","Julia","Python","Scala","Dart","GO","PHP","Perl","R","Rust"],"contributors":["Preetiraj3697","harshraj8843","ANUSHRAV01","ashish07-07","WHJang-0421","james-tharit","patel-aum","hi-Kartik2004","anandfresh","sahilg2931","vedantpople4","loesking","hugosmoreira","grraghav120","dineshlalam15","Varun-Dhruv"],"contentHtml":"<h2>Write a program to split string into array of words</h2>\n<pre><code>Input  : \"hello world\"\nOutput : [\"hello\", \"world\"]\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n#include &#x3C;stdlib.h>\n#include &#x3C;string.h>\n\nint main()\n{\n    char input[] = \"hello world\";\n    char **words = malloc(sizeof(char*) * strlen(input));\n    int word_count = 0;\n    char *token = strtok(input, \" \");\n    while (token != NULL) {\n        words[word_count] = malloc(sizeof(char) * (strlen(token) + 1));\n        strcpy(words[word_count], token);\n        word_count++;\n        token = strtok(NULL, \" \");\n    }\n    for (int i = 0; i &#x3C; word_count; i++) {\n        printf(\"%s\\n\", words[i]);\n        free(words[i]);\n    }\n    free(words);\n    return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n#include &#x3C;vector>\n#include &#x3C;string>\nusing namespace std;\n\nint main()\n{\n    string s,res=\"\";\n    getline(cin,s);\n    vector&#x3C;string> ans;\n    for(int i=0;i&#x3C;s.size();i++){\n        if(s[i]==' '){\n            ans.push_back(res);\n            res=\"\";\n        }\n        else res+=s[i];\n    }\n    ans.push_back(res);\n    for(auto &#x26;it: ans) cout&#x3C;&#x3C;it&#x3C;&#x3C;'\\n';\n    return 0;\n}\n</code></pre>\n<pre><code>using System;\nclass SPLIT {\n      \n    static void Main(string[] args)\n    {\n        String str = \"hello world\";\n        char[] spearator = { ' ' };\n        String[] strlist = str.Split(spearator);\n        \n        foreach(String s in strlist)\n        {\n            Console.WriteLine(s);\n        }\n        Console.ReadKey();\n    }\n}\n</code></pre>\n<pre><code>let splitIntoWords (str: string) =\n    str.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n\n// Example usage\nlet words = splitIntoWords \"hello world\"\nprintfn \"%A\" words // Output: [|\"hello\"; \"world\"|]\n</code></pre>\n<pre><code>import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class SplitStringIntoArrayOfWords {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter the String: \");\n        String str = sc.nextLine();\n        System.out.println(Arrays.toString(splitString(str)));\n    }\n    static String [] splitString(String str){\n        String [] result = str.split(\" \");\n        return result;\n    }\n}\n</code></pre>\n<pre><code>function stringToArray(str){\n return str.split(' ');\n}\n\nconsole.log(stringToArray('hello world'));\n</code></pre>\n<pre><code>import java.util.Scanner\n \nfun main() {\n    val input = Scanner(System.`in`)\n    print(\"Enter a string: \")\n    var string: String = input.nextLine()\n    var splitString = string.split(\" \")\n    print(splitString)\n}\n</code></pre>\n<pre><code>def stringToArray(string) \n  string.split(' ')\nend \n \nprint stringToArray(\"hello world\")\n</code></pre>\n<pre><code>if let str = readLine() {\n   print(\"String of array is  \\(str.split(separator: \" \"))\")\n}\n</code></pre>\n<pre><code>const SplitStringIntoArrayOfWords = (s: String): String[] => {\n    let arrayOfWords: String[] = s.split(\" \")\n    return arrayOfWords;\n}\nexport default SplitStringIntoArrayOfWords;\n</code></pre>\n<pre><code>function split_string(text::String)\n    words = split(text)\n    return words\nend\n\ntext = \"Hello World\"\nwords = split_string(text)\nprintln(words)\n</code></pre>\n<pre><code>print(input().split(\" \"))\n</code></pre>\n<pre><code>object Main {\n    def main(args: Array[String]) {\n        print(\"Enter a string: \")\n        val input = Console.in.readLine()\n        val output = input.split(\" \")\n        println(output.mkString(\"[\", \", \", \"]\"))\n    }\n}\n</code></pre>\n<pre><code>import 'dart:io';\n\nvoid main() {\n  print('Enter a string:');\n  String? input = stdin.readLineSync();\n  List&#x3C;String>? words = input?.split(' ');\n  print(words);\n}\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc splitStringIntoArray(str string) {\n\tarr := strings.Split(str, \" \")\n\tsemiformat := fmt.Sprintf(\"%q\\n\", arr)\n\ttokens := strings.Split(semiformat, \" \")\n\tfmt.Printf(strings.Join(tokens, \", \"))\n}\n\nfunc main() {\n\tstr := \"hello world\"\n\tsplitStringIntoArray(str)\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction string2Array($str) {\n print_r(explode(\" \", $str));\n}\n\nstring2Array('hello world');\n\n?>\n</code></pre>\n<pre><code>my $str ='hello world';\nmy @arr=split (/ /, $str);\nprint \"@arr\";\n</code></pre>\n<pre><code>string &#x3C;- \"hello world\"\nwords &#x3C;- strsplit(string, \" \")[[1]]\nresult &#x3C;- paste(shQuote(words), collapse=\", \")\ncat(sprintf(\"[%s]\", result))\n</code></pre>\n<pre><code>fn split_string(s: &#x26;str) -> Vec&#x3C;&#x26;str> {\n  s.split_whitespace().collect()\n}\n\nfn main() {\n  let s = \"hello world\";\n  let words = split_string(s);\n  println!(\"{:?}\", words);\n}\n</code></pre>\n","markdown":"\n## Write a program to split string into array of words\n\n```txt\nInput  : \"hello world\"\nOutput : [\"hello\", \"world\"]\n```\n\n---\n\n<CodeBlock slug=\"split-string-into-array-of-words\" >\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char input[] = \"hello world\";\n    char **words = malloc(sizeof(char*) * strlen(input));\n    int word_count = 0;\n    char *token = strtok(input, \" \");\n    while (token != NULL) {\n        words[word_count] = malloc(sizeof(char) * (strlen(token) + 1));\n        strcpy(words[word_count], token);\n        word_count++;\n        token = strtok(NULL, \" \");\n    }\n    for (int i = 0; i < word_count; i++) {\n        printf(\"%s\\n\", words[i]);\n        free(words[i]);\n    }\n    free(words);\n    return 0;\n}\n```\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    string s,res=\"\";\n    getline(cin,s);\n    vector<string> ans;\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            ans.push_back(res);\n            res=\"\";\n        }\n        else res+=s[i];\n    }\n    ans.push_back(res);\n    for(auto &it: ans) cout<<it<<'\\n';\n    return 0;\n}\n```\n\n```cs\nusing System;\nclass SPLIT {\n      \n    static void Main(string[] args)\n    {\n        String str = \"hello world\";\n        char[] spearator = { ' ' };\n        String[] strlist = str.Split(spearator);\n        \n        foreach(String s in strlist)\n        {\n            Console.WriteLine(s);\n        }\n        Console.ReadKey();\n    }\n}\n```\n\n```fs\nlet splitIntoWords (str: string) =\n    str.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n\n// Example usage\nlet words = splitIntoWords \"hello world\"\nprintfn \"%A\" words // Output: [|\"hello\"; \"world\"|]\n```\n\n```java\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class SplitStringIntoArrayOfWords {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter the String: \");\n        String str = sc.nextLine();\n        System.out.println(Arrays.toString(splitString(str)));\n    }\n    static String [] splitString(String str){\n        String [] result = str.split(\" \");\n        return result;\n    }\n}\n```\n\n```js\nfunction stringToArray(str){\n return str.split(' ');\n}\n\nconsole.log(stringToArray('hello world'));\n```\n\n```kt\nimport java.util.Scanner\n \nfun main() {\n    val input = Scanner(System.`in`)\n    print(\"Enter a string: \")\n    var string: String = input.nextLine()\n    var splitString = string.split(\" \")\n    print(splitString)\n}\n```\n\n```rb\ndef stringToArray(string) \n  string.split(' ')\nend \n \nprint stringToArray(\"hello world\")\n```\n\n```swift\nif let str = readLine() {\n   print(\"String of array is  \\(str.split(separator: \" \"))\")\n}\n```\n\n```ts\nconst SplitStringIntoArrayOfWords = (s: String): String[] => {\n    let arrayOfWords: String[] = s.split(\" \")\n    return arrayOfWords;\n}\nexport default SplitStringIntoArrayOfWords;\n```\n\n```jl\nfunction split_string(text::String)\n    words = split(text)\n    return words\nend\n\ntext = \"Hello World\"\nwords = split_string(text)\nprintln(words)\n```\n\n```py\nprint(input().split(\" \"))\n```\n\n```scala\nobject Main {\n    def main(args: Array[String]) {\n        print(\"Enter a string: \")\n        val input = Console.in.readLine()\n        val output = input.split(\" \")\n        println(output.mkString(\"[\", \", \", \"]\"))\n    }\n}\n```\n\n```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a string:');\n  String? input = stdin.readLineSync();\n  List<String>? words = input?.split(' ');\n  print(words);\n}\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc splitStringIntoArray(str string) {\n\tarr := strings.Split(str, \" \")\n\tsemiformat := fmt.Sprintf(\"%q\\n\", arr)\n\ttokens := strings.Split(semiformat, \" \")\n\tfmt.Printf(strings.Join(tokens, \", \"))\n}\n\nfunc main() {\n\tstr := \"hello world\"\n\tsplitStringIntoArray(str)\n}\n```\n\n```php\n<?php\n\nfunction string2Array($str) {\n print_r(explode(\" \", $str));\n}\n\nstring2Array('hello world');\n\n?>\n```\n\n```pl\nmy $str ='hello world';\nmy @arr=split (/ /, $str);\nprint \"@arr\";\n```\n\n```r\nstring <- \"hello world\"\nwords <- strsplit(string, \" \")[[1]]\nresult <- paste(shQuote(words), collapse=\", \")\ncat(sprintf(\"[%s]\", result))\n```\n\n```rs\nfn split_string(s: &str) -> Vec<&str> {\n  s.split_whitespace().collect()\n}\n\nfn main() {\n  let s = \"hello world\";\n  let words = split_string(s);\n  println!(\"{:?}\", words);\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-06T05:44:28Z"}