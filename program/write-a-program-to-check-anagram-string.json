{"slug":"write-a-program-to-check-anagram-string","title":"Write a program to check anagram string","trackId":6642,"tags":["Java","JavaScript","Kotlin","Ruby","TypeScript"],"contributors":["frankidatank","786-aquib","jfinley6","DenuwanLiyanage","wheels63","harshraj8843"],"contentHtml":"<h2>Write a program to write a program to check anagram string</h2>\n<p>Two strings are said to be anagrams if they make a meaningful word by rearranging or shuffling the letters of the string. In other words, we can say that two strings are anagrams if they contain the same characters but in different order.</p>\n<pre><code>Input:  listen\r\nOutput: silent\n</code></pre>\n<hr>\n<pre><code>import java.util.*;\n\n\nclass WriteAProgramToCheckAnagramString{\n\tpublic static void main(String[] args){\n\t\t// Inputs\n\t\tString s1 = \"pan\";\n\t\tString s2 = \"nap\";\n\n\t\t//Check anagrams\n\t\tif(isAnagram(s1,s2)){\n\t\t\tSystem.out.println(\"Anagram Strings\");\n\t\t}else{\n\t\t\tSystem.out.println(\"Not Anagram Strings\");\n\n\t\t}\n\n\n}\n\tpublic static boolean isAnagram(String str1, String str2) {\n\n\t\t// Convert strings to lowercase for case sensitive strings\n\t\tString lowerStr1 = str1.toLowerCase();\n\t\tString lowerStr2 = str2.toLowerCase();\n\n\t\t// Convert strings to character arrays\n\t\tchar[] arr1 = lowerStr1.toCharArray();\n\t\tchar[] arr2 = lowerStr2.toCharArray();\n\n\t\t// Sort character arrays\n\t\tArrays.sort(arr1);\n\t\tArrays.sort(arr2);\n\n\t\t// Compare sorted character arrays\n\t\treturn Arrays.equals(arr1, arr2);\n\t}\n\n}\n</code></pre>\n<pre><code>const anagramChecker = (str1, str2) => {\n    if (str1.length !== str2.length) {\n        return false;\n    }\n    \n    return str1.toLowerCase().split('').sort().join(\"\") === str2.toLowerCase().split('').sort().join(\"\");\n}\n\n// console.log(anagramChecker('aAbb', 'bBaa'))\n</code></pre>\n<pre><code>fun anagramChecker(s: String, t: String): Boolean {\n    if (s.length != t.length) return false\n\n    val sMap = mutableMapOf&#x3C;Char, Int>()\n    val tMap = mutableMapOf&#x3C;Char, Int>()\n\n    for (i in s.indices){\n        sMap[s[i]] = sMap.getOrDefault(s[i], 0) + 1\n        tMap[t[i]] = tMap.getOrDefault(t[i], 0) + 1\n    }\n\n    for (ch in sMap.keys){\n        if (sMap[ch] != tMap[ch]) return false\n    }\n    return true\n}\n\n//println(anagramChecker(\"pan\", \"nap\"))\n</code></pre>\n<pre><code>def checkAnagram str1, str2\n    if str1.reverse == str2\n        \"Anagram Strings\"\n    else\n        \"Not Anagram Strings\"\n    end\nend\n\nputs checkAnagram \"pan\", \"nap\"\n</code></pre>\n<pre><code>function isAnagram(str1: string, str2: string): boolean {\n    // Remove any whitespace and convert to lowercase\n    str1 = str1.replace(/\\s/g, '').toLowerCase();\n    str2 = str2.replace(/\\s/g, '').toLowerCase();\n  \n    // Check if the strings have the same length\n    if (str1.length !== str2.length) {\n      return false;\n    }\n  \n    // Create objects to count the number of occurrences of each letter\n    const counts1 = {};\n    const counts2 = {};\n  \n    // Count the occurrences of each letter in the first string\n    for (const char of str1) {\n      counts1[char] = (counts1[char] || 0) + 1;\n    }\n  \n    // Count the occurrences of each letter in the second string\n    for (const char of str2) {\n      counts2[char] = (counts2[char] || 0) + 1;\n    }\n  \n    // Compare the counts of each letter\n    for (const char in counts1) {\n      if (counts1[char] !== counts2[char]) {\n        return false;\n      }\n    }\n  \n    return true;\n  }\n  \n  // Read user input for the two strings\n  const readline = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  \n  readline.question('Enter the first string: ', (str1) => {\n    readline.question('Enter the second string: ', (str2) => {\n      // Check if the strings are anagrams of each other\n      if (isAnagram(str1, str2)) {\n        console.log(`${str1} and ${str2} are anagrams of each other.`);\n      } else {\n        console.log(`${str1} and ${str2} are not anagrams of each other.`);\n      }\n  \n      // Close the readline interface\n      readline.close();\n    });\n  });\n</code></pre>\n","markdown":"\n## Write a program to write a program to check anagram string\n\nTwo strings are said to be anagrams if they make a meaningful word by rearranging or shuffling the letters of the string. In other words, we can say that two strings are anagrams if they contain the same characters but in different order.\r\n\r\n```\r\nInput:  listen\r\nOutput: silent\r\n```\n\n---\n\n<CodeBlock slug=\"write-a-program-to-check-anagram-string\" >\n\n```java\nimport java.util.*;\n\n\nclass WriteAProgramToCheckAnagramString{\n\tpublic static void main(String[] args){\n\t\t// Inputs\n\t\tString s1 = \"pan\";\n\t\tString s2 = \"nap\";\n\n\t\t//Check anagrams\n\t\tif(isAnagram(s1,s2)){\n\t\t\tSystem.out.println(\"Anagram Strings\");\n\t\t}else{\n\t\t\tSystem.out.println(\"Not Anagram Strings\");\n\n\t\t}\n\n\n}\n\tpublic static boolean isAnagram(String str1, String str2) {\n\n\t\t// Convert strings to lowercase for case sensitive strings\n\t\tString lowerStr1 = str1.toLowerCase();\n\t\tString lowerStr2 = str2.toLowerCase();\n\n\t\t// Convert strings to character arrays\n\t\tchar[] arr1 = lowerStr1.toCharArray();\n\t\tchar[] arr2 = lowerStr2.toCharArray();\n\n\t\t// Sort character arrays\n\t\tArrays.sort(arr1);\n\t\tArrays.sort(arr2);\n\n\t\t// Compare sorted character arrays\n\t\treturn Arrays.equals(arr1, arr2);\n\t}\n\n}\n```\n\n```js\nconst anagramChecker = (str1, str2) => {\n    if (str1.length !== str2.length) {\n        return false;\n    }\n    \n    return str1.toLowerCase().split('').sort().join(\"\") === str2.toLowerCase().split('').sort().join(\"\");\n}\n\n// console.log(anagramChecker('aAbb', 'bBaa'))\n```\n\n```kt\nfun anagramChecker(s: String, t: String): Boolean {\n    if (s.length != t.length) return false\n\n    val sMap = mutableMapOf<Char, Int>()\n    val tMap = mutableMapOf<Char, Int>()\n\n    for (i in s.indices){\n        sMap[s[i]] = sMap.getOrDefault(s[i], 0) + 1\n        tMap[t[i]] = tMap.getOrDefault(t[i], 0) + 1\n    }\n\n    for (ch in sMap.keys){\n        if (sMap[ch] != tMap[ch]) return false\n    }\n    return true\n}\n\n//println(anagramChecker(\"pan\", \"nap\"))\n```\n\n```rb\ndef checkAnagram str1, str2\n    if str1.reverse == str2\n        \"Anagram Strings\"\n    else\n        \"Not Anagram Strings\"\n    end\nend\n\nputs checkAnagram \"pan\", \"nap\"\n```\n\n```ts\nfunction isAnagram(str1: string, str2: string): boolean {\n    // Remove any whitespace and convert to lowercase\n    str1 = str1.replace(/\\s/g, '').toLowerCase();\n    str2 = str2.replace(/\\s/g, '').toLowerCase();\n  \n    // Check if the strings have the same length\n    if (str1.length !== str2.length) {\n      return false;\n    }\n  \n    // Create objects to count the number of occurrences of each letter\n    const counts1 = {};\n    const counts2 = {};\n  \n    // Count the occurrences of each letter in the first string\n    for (const char of str1) {\n      counts1[char] = (counts1[char] || 0) + 1;\n    }\n  \n    // Count the occurrences of each letter in the second string\n    for (const char of str2) {\n      counts2[char] = (counts2[char] || 0) + 1;\n    }\n  \n    // Compare the counts of each letter\n    for (const char in counts1) {\n      if (counts1[char] !== counts2[char]) {\n        return false;\n      }\n    }\n  \n    return true;\n  }\n  \n  // Read user input for the two strings\n  const readline = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  \n  readline.question('Enter the first string: ', (str1) => {\n    readline.question('Enter the second string: ', (str2) => {\n      // Check if the strings are anagrams of each other\n      if (isAnagram(str1, str2)) {\n        console.log(`${str1} and ${str2} are anagrams of each other.`);\n      } else {\n        console.log(`${str1} and ${str2} are not anagrams of each other.`);\n      }\n  \n      // Close the readline interface\n      readline.close();\n    });\n  });\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-10T11:04:55Z"}