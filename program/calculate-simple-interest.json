{"slug":"calculate-simple-interest","title":"Calculate simple interest","trackId":5293,"tags":["C","C++","C#","Java","JavaScript","Kotlin","Ruby","Swift","TypeScript","Kotlin","Python","Swift","Scala","GO","PHP","Perl","Rust"],"contributors":["harshraj8843","esivakumar18","bnzone","anandfresh","R0-H-1T","yashasvini121","vedantpople4","0ME9A","dineshlalam15"],"contentHtml":"<h2>Write a program to calculate simple interest</h2>\n<p>Simple interest = (principal amount * rate of interest * time) / 100</p>\n<pre><code>Principal : 1000\nRate      : 10\nTime      : 5\n\nSimple interest : 500\n</code></pre>\n<hr>\n<pre><code>//Simple interset program\n\n\n# include &#x3C;stdio.h>\n# include &#x3C;conio.h>\n\nint main(){\n \n    int principal, rate, time, interest;\n\n    printf(\"Enter the principal: \");\n    scanf(\"%d\", &#x26;principal);\n\n    printf(\"Enter the rate: \");\n    scanf(\"%d\", &#x26;rate);\n\n    printf(\"Enter the time: \");\n    scanf(\"%d\", &#x26;time);\n\n    interest = principal * rate * time / 100;\n    printf(\"Simple interest is %d\", interest);\n\n    return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\nusing namespace std;\n\nint main(){\n    float p, r, t, si;\n    cout &#x3C;&#x3C; \"Enter the principal amount: \";\n    cin >> p;\n    cout &#x3C;&#x3C; \"Enter the rate of interest: \";\n    cin >> r;\n    cout &#x3C;&#x3C; \"Enter the time period: \";\n    cin >> t;\n    si = (p * r * t) / 100;\n    cout &#x3C;&#x3C; \"Simple interest is: \" &#x3C;&#x3C; si;\n    return 0;\n}\n</code></pre>\n<pre><code>using System;\n\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter the principal :\");\n    double inches = Convert.ToDouble(Console.ReadLine());\n    Console.WriteLine (\"Please enter the rate of interest :\");\n    double interest = Convert.ToDouble(Console.ReadLine());\n    Console.WriteLine (\"Please enter the time :\");\n    double time = Convert.ToDouble(Console.ReadLine());\n    double simpleInterest = (principal *  interest * time ) / 100;\n    Console.WriteLine(\"Simple Interest : \"+ simpleInterest);\n  }\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class CalculateSimpleInterest {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter\");\n        System.out.print(\"Principle Amount: \");\n        double p = sc.nextDouble();\n        System.out.print(\"Rate of Interest: \");\n        double r = sc.nextDouble();\n        System.out.print(\"Time(in Days): \");\n        double t = sc.nextDouble();\n        System.out.println(\"Simple Interest: \" +simpleInterest(p,r,t));\n    }\n    static double simpleInterest(double principleAmount, double rate, double time){\n        return (principleAmount * rate * time)/100;\n    }\n}\n</code></pre>\n<pre><code>const simpleInterest = (principal, interest, time) => {\n    return (principal * interest * time) / 100;\n}\n\nconsole.log(simpleInterest)\n</code></pre>\n<pre><code>fun main(args: Array&#x3C;String>) {\n    val principal = 1000\n    val rate = 10\n    val time = 5\n    val interest = (principal * rate * time) / 100\n\n    println(interest)\n}\n</code></pre>\n<pre><code>def simple_interest(principal , interest , time)\n  (principal * interest * time) / 100\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Please enter the Principal amount : '\n  principal = gets.chomp.to_i\n  print 'Please enter the Rate of Interest : '\n  interest = gets.chomp.to_i\n  print 'Please enter the Time : '\n  time = gets.chomp.to_i\n  puts \"Simple Interest : #{simple_interest(principal , interest , time)}\"\nend\n</code></pre>\n<pre><code>import Swift\nimport Foundation\n\nprint(\"Enter principal: \")\nvar principal = Int(readLine()!)!\nprint(\"Enter rate: \")\nvar rate = Int(readLine()!)!\nprint(\"Enter time: \")\nvar time = Int(readLine()!)!\nprint(\"Simple Interest: \", (principal * rate * time)/100)\n</code></pre>\n<pre><code>const simpleInterest = (\n  principal: number,\n  interest: number,\n  time: number\n): number => {\n  return (principal * interest * time) / 100;\n};\n\nconsole.log(simpleInterest(1000, 10, 5));\n</code></pre>\n<pre><code>fun main(args: Array&#x3C;String>) {\n    val principal = 1000\n    val rate = 10\n    val time = 5\n    val interest = (principal * rate * time) / 100\n\n    println(interest)\n}\n</code></pre>\n<pre><code>def simpleInterest():\n    principal = int(input(\"Enter principal:- \"))\n    interest = int(input(\"Enter interest:- \"))\n    time = int(input(\"Enter time:- \"))\n\n    return (principal * interest * time) / 100\n\n\nprint(simpleInterest())\n</code></pre>\n<pre><code>import Swift\nimport Foundation\n\nprint(\"Enter principal: \")\nvar principal = Int(readLine()!)!\nprint(\"Enter rate: \")\nvar rate = Int(readLine()!)!\nprint(\"Enter time: \")\nvar time = Int(readLine()!)!\nprint(\"Simple Interest: \", (principal * rate * time)/100)\n</code></pre>\n<pre><code>import scala.io.StdIn._;\n\nobject simpleInterest {\n    def main(args:Array[String]):Unit={\n        println(\"Enter principal amount : \");\n        var principal = readLine().toInt;\n        println(\"Enter rate of interest : \");\n        var interest = readLine().toInt;\n        println(\"Enter the time : \");\n        var time = readLine().toInt;\n        var simpleInterest = (principal * interest * time)/100;\n        println(\"Simple Interest : \"+simpleInterest);\n    }\n}\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar amount, time, rate int\n\tfmt.Scanf(\"%d\", &#x26;amount)\n\tfmt.Scanf(\"%d\", &#x26;time)\n\tfmt.Scanf(\"%d\", &#x26;rate)\n\tsimpleInterest := (amount * time * rate) / 100\n\tfmt.Println(simpleInterest)\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction simpleInterest($principal, $interest, $time){\n    return ($principal * $interest * $time)/100;\n}\n\necho simpleInterest(1000, 10, 5);\n\n?>\n</code></pre>\n<pre><code>print \"Enter the principal: \";\nmy $principal = &#x3C;STDIN> ;\n\nprint \"Enter the rate of interest: \";\nmy $interest = &#x3C;STDIN> ;\n\nprint \"Enter the time: \";\nmy $time = &#x3C;STDIN> ;\n\nmy $res = simpleInterest($principal, $interest);\nprint \"Simple Interest : $res\";\n\nsub simpleInterest\n{\n    my ($x) = @_;\n    my $res = ($principal * $interest * $time) / 100;\n    return $res ;   \n}\n</code></pre>\n<pre><code>fn simple_interest(principal: f32, rate: f32, time: f32) -> f32 {\n    (principal * rate * time) / 100.0\n}\n</code></pre>\n","markdown":"\n## Write a program to calculate simple interest\n\nSimple interest = (principal amount * rate of interest * time) / 100\n\n```txt\nPrincipal : 1000\nRate      : 10\nTime      : 5\n\nSimple interest : 500\n```\n\n---\n\n<CodeBlock slug=\"calculate-simple-interest\" >\n\n```c\n//Simple interset program\n\n\n# include <stdio.h>\n# include <conio.h>\n\nint main(){\n \n    int principal, rate, time, interest;\n\n    printf(\"Enter the principal: \");\n    scanf(\"%d\", &principal);\n\n    printf(\"Enter the rate: \");\n    scanf(\"%d\", &rate);\n\n    printf(\"Enter the time: \");\n    scanf(\"%d\", &time);\n\n    interest = principal * rate * time / 100;\n    printf(\"Simple interest is %d\", interest);\n\n    return 0;\n}\n```\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main(){\n    float p, r, t, si;\n    cout << \"Enter the principal amount: \";\n    cin >> p;\n    cout << \"Enter the rate of interest: \";\n    cin >> r;\n    cout << \"Enter the time period: \";\n    cin >> t;\n    si = (p * r * t) / 100;\n    cout << \"Simple interest is: \" << si;\n    return 0;\n}\n```\n\n```cs\nusing System;\n\nclass MainClass {\n    public static void Main (string[] args) {\n    Console.WriteLine (\"Please enter the principal :\");\n    double inches = Convert.ToDouble(Console.ReadLine());\n    Console.WriteLine (\"Please enter the rate of interest :\");\n    double interest = Convert.ToDouble(Console.ReadLine());\n    Console.WriteLine (\"Please enter the time :\");\n    double time = Convert.ToDouble(Console.ReadLine());\n    double simpleInterest = (principal *  interest * time ) / 100;\n    Console.WriteLine(\"Simple Interest : \"+ simpleInterest);\n  }\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class CalculateSimpleInterest {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter\");\n        System.out.print(\"Principle Amount: \");\n        double p = sc.nextDouble();\n        System.out.print(\"Rate of Interest: \");\n        double r = sc.nextDouble();\n        System.out.print(\"Time(in Days): \");\n        double t = sc.nextDouble();\n        System.out.println(\"Simple Interest: \" +simpleInterest(p,r,t));\n    }\n    static double simpleInterest(double principleAmount, double rate, double time){\n        return (principleAmount * rate * time)/100;\n    }\n}\n```\n\n```js\nconst simpleInterest = (principal, interest, time) => {\n    return (principal * interest * time) / 100;\n}\n\nconsole.log(simpleInterest)\n```\n\n```kt\nfun main(args: Array<String>) {\n    val principal = 1000\n    val rate = 10\n    val time = 5\n    val interest = (principal * rate * time) / 100\n\n    println(interest)\n}\n```\n\n```rb\ndef simple_interest(principal , interest , time)\n  (principal * interest * time) / 100\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Please enter the Principal amount : '\n  principal = gets.chomp.to_i\n  print 'Please enter the Rate of Interest : '\n  interest = gets.chomp.to_i\n  print 'Please enter the Time : '\n  time = gets.chomp.to_i\n  puts \"Simple Interest : #{simple_interest(principal , interest , time)}\"\nend\n```\n\n```swift\nimport Swift\nimport Foundation\n\nprint(\"Enter principal: \")\nvar principal = Int(readLine()!)!\nprint(\"Enter rate: \")\nvar rate = Int(readLine()!)!\nprint(\"Enter time: \")\nvar time = Int(readLine()!)!\nprint(\"Simple Interest: \", (principal * rate * time)/100)\n```\n\n```ts\nconst simpleInterest = (\n  principal: number,\n  interest: number,\n  time: number\n): number => {\n  return (principal * interest * time) / 100;\n};\n\nconsole.log(simpleInterest(1000, 10, 5));\n```\n\n```kt\nfun main(args: Array<String>) {\n    val principal = 1000\n    val rate = 10\n    val time = 5\n    val interest = (principal * rate * time) / 100\n\n    println(interest)\n}\n```\n\n```py\ndef simpleInterest():\n    principal = int(input(\"Enter principal:- \"))\n    interest = int(input(\"Enter interest:- \"))\n    time = int(input(\"Enter time:- \"))\n\n    return (principal * interest * time) / 100\n\n\nprint(simpleInterest())\n```\n\n```swift\nimport Swift\nimport Foundation\n\nprint(\"Enter principal: \")\nvar principal = Int(readLine()!)!\nprint(\"Enter rate: \")\nvar rate = Int(readLine()!)!\nprint(\"Enter time: \")\nvar time = Int(readLine()!)!\nprint(\"Simple Interest: \", (principal * rate * time)/100)\n```\n\n```scala\nimport scala.io.StdIn._;\n\nobject simpleInterest {\n    def main(args:Array[String]):Unit={\n        println(\"Enter principal amount : \");\n        var principal = readLine().toInt;\n        println(\"Enter rate of interest : \");\n        var interest = readLine().toInt;\n        println(\"Enter the time : \");\n        var time = readLine().toInt;\n        var simpleInterest = (principal * interest * time)/100;\n        println(\"Simple Interest : \"+simpleInterest);\n    }\n}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar amount, time, rate int\n\tfmt.Scanf(\"%d\", &amount)\n\tfmt.Scanf(\"%d\", &time)\n\tfmt.Scanf(\"%d\", &rate)\n\tsimpleInterest := (amount * time * rate) / 100\n\tfmt.Println(simpleInterest)\n}\n```\n\n```php\n<?php\n\nfunction simpleInterest($principal, $interest, $time){\n    return ($principal * $interest * $time)/100;\n}\n\necho simpleInterest(1000, 10, 5);\n\n?>\n```\n\n```pl\nprint \"Enter the principal: \";\nmy $principal = <STDIN> ;\n\nprint \"Enter the rate of interest: \";\nmy $interest = <STDIN> ;\n\nprint \"Enter the time: \";\nmy $time = <STDIN> ;\n\nmy $res = simpleInterest($principal, $interest);\nprint \"Simple Interest : $res\";\n\nsub simpleInterest\n{\n    my ($x) = @_;\n    my $res = ($principal * $interest * $time) / 100;\n    return $res ;   \n}\n```\n\n```rs\nfn simple_interest(principal: f32, rate: f32, time: f32) -> f32 {\n    (principal * rate * time) / 100.0\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-06T04:34:21Z"}