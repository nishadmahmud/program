{"slug":"convert-string-to-pathcase","title":"Convert string to pathcase","trackId":2744,"tags":["C","C++","Java","JavaScript","Kotlin","Ruby","TypeScript","Python","GO","PHP"],"contributors":["Osher160","harshraj8843","rafaover","rksp25","joao-vitor-souza","Nitya-Pasrija","PoweredByCaffein","Greeshma-frontier"],"contentHtml":"<h2>Write a program to convert string to pathcase</h2>\n<p>Pathcase is a style of writing in which all letters are lowercase and spaces are replaced with forward slashes.</p>\n<pre><code>Input  : \"hello world\"\nOutput : \"hello/world\"\n</code></pre>\n<hr>\n<pre><code>#define _POSIX_C_SOURCE 200809L\n#include &#x3C;stdio.h> /* printf, scanf */\n#include &#x3C;stdlib.h> /* fgets, malloc, free */\n\n\nvoid ConvertStringToPathcase(char *str);\n\n\nint main()\n{\n    char *str = NULL;\n    int is_good = 0;\n    size_t size = 0;\n\n    if(scanf(\"%lu\",&#x26;size) != 1)\n    {\n        return -1;\n    }\n    \n    str = (char *)malloc(sizeof(char) * size);\n\n    /* discard \\n of scanf so i can give getline new input */\n    scanf(\"%c\", (char *) stdin);\n    \n    is_good = getline(&#x26;str,&#x26;size,stdin);\n\n    if(is_good == -1)\n    {\n        free(str);\n        return -1;\n    }\n\n    ConvertStringToPathcase(str);\n\n    printf(\"%s\\n\",str);\n\n    free(str);\n\n    return 0;\n}\n\nvoid ConvertStringToPathcase(char *str)\n{\n\n    while(*str != '\\0')\n    {\n        if(*str == ' ')\n        {\n            *str = '/';\n        }\n\n        if(*str >= 'A' &#x26;&#x26; *str &#x3C;= 'Z')\n        {\n            *str += 32;\n        }\n\n        ++str;\n    }\n}\n</code></pre>\n<pre><code>#include &#x3C;cstring>\r\n#include &#x3C;iostream>\r\nusing namespace std;\r\n \r\nint main()\r\n{\r\n    string str;\r\n    getline(cin, str);\r\n    for (int i = 0; i &#x3C; str.length(); ++i) {\r\n        if (str[i] == ' ') {\r\n            str[i] = '/';\r\n        }\r\n    }\r\n    cout &#x3C;&#x3C; str &#x3C;&#x3C; endl;\r\n    return 0;\r\n}\n</code></pre>\n<pre><code>class replaceSpace\r\n{\r\n\tpublic static void main(String []args)\r\n\t{\r\n\t    String str = \"Trial string\";\r\n\t    String s=\"\";\r\n\t    for (int i = 0; i &#x3C; str.length(); ++i) {\r\n\t\t\tif (str.charAt(i) == ' ')\r\n\t\t\t\ts += '/';\r\n\t\t\telse\r\n\t\t\t\ts += str.charAt(i);\r\n\t\t}\r\n\t\tSystem.out.println(s);\r\n\t}\r\n}\n</code></pre>\n<pre><code>function stringToPathCase(str) {\n    let toPathcase = str.split('');\n    console.log(toPathcase);\n    for (let i = 0; i &#x3C; toPathcase.length; i++) {\n        if(toPathcase[i] === \",\" || toPathcase[i] === \"?\" || toPathcase[i] === \"/\") {\n            toPathcase[i] = \"\";\n        }\n        \n        if(toPathcase[i] === \" \") {\n            console.log(\"true\");\n            toPathcase[i] = \"/\";\n        }\n    }\n    console.log(toPathcase.join(''));\n}\n\nstringToPathCase(\"hello world, good morning\");\n</code></pre>\n<pre><code>import java.util.Scanner\n\nfun main() {\n    print(\"Enter String : \")\n    println()\n    var min = readLine()\n\n    println(\"Camel Case: \" + ConvertStringToPathcase(min!!.split(\" \")))\n\n}\n\nprivate fun ConvertStringToPathcase(args: List&#x3C;String>): String {\n    val buffer = StringBuffer()\n    for((index,day) in args.withIndex()){\n        //println(\"$index :$day\")\n        if(index == 0) {\n            buffer.append(day);\n        } else {\n            buffer.append(\"/\").append(day)\n        }\n    }\n\n    return buffer.toString()\n}\n</code></pre>\n<pre><code>puts 'Please, insert your string: '\nuser_input = gets.chomp\nresult = user_input.split(' ').map(&#x26;:downcase).join('/')\nputs result\n</code></pre>\n<pre><code>function stringToPathCase(str: any) {\n    let toPathcase = str.split('');\n    console.log(toPathcase);\n    for (let i = 0; i &#x3C; toPathcase.length; i++) {\n                                          \n        // to remove other characters\n        if(toPathcase[i] === \",\" || toPathcase[i] === \"?\" || toPathcase[i] === \"/\") {\n            toPathcase[i] = \"\";\n        }\n        \n        // to remove white space\n        if(toPathcase[i] === \" \") {\n            console.log(\"true\");\n            toPathcase[i] = \"/\";\n        }\n    }\n    console.log(toPathcase.join(''));\n}\n\nstringToPathCase(\"hello world, good morning\");\n</code></pre>\n<pre><code>str = input(\"Enter string: \")\r\nfor i in range(0, len(str), 1):\r\n    if str[i] == \" \":\r\n        str = str.replace(str[i], \"/\")\r\nprint(str)\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// We are using a bufio reader as the scanf method does not allow taking arbitrary number inputs with spaces\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Printf(\"Please enter a string: \")\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\tfmt.Println(\"Failed to take input:\", err)\n\t}\n\n\tfmt.Printf(\"Input: %s\", line)\n\tline = strings.ReplaceAll(line, \" \", \"/\")\n\tfmt.Printf(\"Output: %s\", line)\n}\n</code></pre>\n<pre><code>&#x3C;?php\r\n\t$str = \"String that we are gonna convert\";\r\n  for ($i = 0; $i &#x3C; strlen($str); ++$i)\r\n  {\r\n     if ($str[$i] == ' ')\r\n      {\r\n        $str[$i] = '/';\r\n      }\r\n  }\r\n  echo $str . \"\\n\";\r\n?>\n</code></pre>\n","markdown":"\n## Write a program to convert string to pathcase\n\nPathcase is a style of writing in which all letters are lowercase and spaces are replaced with forward slashes.\n\n```txt\nInput  : \"hello world\"\nOutput : \"hello/world\"\n```\n\n---\n\n<CodeBlock slug=\"convert-string-to-pathcase\" >\n\n```c\n#define _POSIX_C_SOURCE 200809L\n#include <stdio.h> /* printf, scanf */\n#include <stdlib.h> /* fgets, malloc, free */\n\n\nvoid ConvertStringToPathcase(char *str);\n\n\nint main()\n{\n    char *str = NULL;\n    int is_good = 0;\n    size_t size = 0;\n\n    if(scanf(\"%lu\",&size) != 1)\n    {\n        return -1;\n    }\n    \n    str = (char *)malloc(sizeof(char) * size);\n\n    /* discard \\n of scanf so i can give getline new input */\n    scanf(\"%c\", (char *) stdin);\n    \n    is_good = getline(&str,&size,stdin);\n\n    if(is_good == -1)\n    {\n        free(str);\n        return -1;\n    }\n\n    ConvertStringToPathcase(str);\n\n    printf(\"%s\\n\",str);\n\n    free(str);\n\n    return 0;\n}\n\nvoid ConvertStringToPathcase(char *str)\n{\n\n    while(*str != '\\0')\n    {\n        if(*str == ' ')\n        {\n            *str = '/';\n        }\n\n        if(*str >= 'A' && *str <= 'Z')\n        {\n            *str += 32;\n        }\n\n        ++str;\n    }\n}\n```\n\n```cpp\n#include <cstring>\r\n#include <iostream>\r\nusing namespace std;\r\n \r\nint main()\r\n{\r\n    string str;\r\n    getline(cin, str);\r\n    for (int i = 0; i < str.length(); ++i) {\r\n        if (str[i] == ' ') {\r\n            str[i] = '/';\r\n        }\r\n    }\r\n    cout << str << endl;\r\n    return 0;\r\n}\n```\n\n```java\nclass replaceSpace\r\n{\r\n\tpublic static void main(String []args)\r\n\t{\r\n\t    String str = \"Trial string\";\r\n\t    String s=\"\";\r\n\t    for (int i = 0; i < str.length(); ++i) {\r\n\t\t\tif (str.charAt(i) == ' ')\r\n\t\t\t\ts += '/';\r\n\t\t\telse\r\n\t\t\t\ts += str.charAt(i);\r\n\t\t}\r\n\t\tSystem.out.println(s);\r\n\t}\r\n}\n```\n\n```js\nfunction stringToPathCase(str) {\n    let toPathcase = str.split('');\n    console.log(toPathcase);\n    for (let i = 0; i < toPathcase.length; i++) {\n        if(toPathcase[i] === \",\" || toPathcase[i] === \"?\" || toPathcase[i] === \"/\") {\n            toPathcase[i] = \"\";\n        }\n        \n        if(toPathcase[i] === \" \") {\n            console.log(\"true\");\n            toPathcase[i] = \"/\";\n        }\n    }\n    console.log(toPathcase.join(''));\n}\n\nstringToPathCase(\"hello world, good morning\");\n```\n\n```kt\nimport java.util.Scanner\n\nfun main() {\n    print(\"Enter String : \")\n    println()\n    var min = readLine()\n\n    println(\"Camel Case: \" + ConvertStringToPathcase(min!!.split(\" \")))\n\n}\n\nprivate fun ConvertStringToPathcase(args: List<String>): String {\n    val buffer = StringBuffer()\n    for((index,day) in args.withIndex()){\n        //println(\"$index :$day\")\n        if(index == 0) {\n            buffer.append(day);\n        } else {\n            buffer.append(\"/\").append(day)\n        }\n    }\n\n    return buffer.toString()\n}\n```\n\n```rb\nputs 'Please, insert your string: '\nuser_input = gets.chomp\nresult = user_input.split(' ').map(&:downcase).join('/')\nputs result\n```\n\n```ts\nfunction stringToPathCase(str: any) {\n    let toPathcase = str.split('');\n    console.log(toPathcase);\n    for (let i = 0; i < toPathcase.length; i++) {\n                                          \n        // to remove other characters\n        if(toPathcase[i] === \",\" || toPathcase[i] === \"?\" || toPathcase[i] === \"/\") {\n            toPathcase[i] = \"\";\n        }\n        \n        // to remove white space\n        if(toPathcase[i] === \" \") {\n            console.log(\"true\");\n            toPathcase[i] = \"/\";\n        }\n    }\n    console.log(toPathcase.join(''));\n}\n\nstringToPathCase(\"hello world, good morning\");\n```\n\n```py\nstr = input(\"Enter string: \")\r\nfor i in range(0, len(str), 1):\r\n    if str[i] == \" \":\r\n        str = str.replace(str[i], \"/\")\r\nprint(str)\n```\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// We are using a bufio reader as the scanf method does not allow taking arbitrary number inputs with spaces\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Printf(\"Please enter a string: \")\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\tfmt.Println(\"Failed to take input:\", err)\n\t}\n\n\tfmt.Printf(\"Input: %s\", line)\n\tline = strings.ReplaceAll(line, \" \", \"/\")\n\tfmt.Printf(\"Output: %s\", line)\n}\n```\n\n```php\n<?php\r\n\t$str = \"String that we are gonna convert\";\r\n  for ($i = 0; $i < strlen($str); ++$i)\r\n  {\r\n     if ($str[$i] == ' ')\r\n      {\r\n        $str[$i] = '/';\r\n      }\r\n  }\r\n  echo $str . \"\\n\";\r\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-03T17:21:05Z"}