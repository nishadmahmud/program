{"slug":"find-the-maximum-sum-of-a-contiguous-subarray-(kadane's-algorithm)","title":"Find the maximum sum of a contiguous subarray (Kadane's Algorithm)","trackId":3918,"tags":["C++","Java","JavaScript","Kotlin","Ruby","TypeScript","Python","GO"],"contributors":["harshraj8843","Fukurokudzu","Mux199","joao-vitor-souza","grraghav120","Simba-97","Rayyanranje","nikzayn","vedha-vikash-pixel"],"contentHtml":"<h2>Write a program to find the maximum sum of a contiguous subarray (kadane's algorithm)</h2>\n<p>Kadane's algorithm is used to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. For example, for the sequence of values <code>−2, 1, −3, 4, −1, 2, 1, −5, 4;</code> the contiguous subarray with the largest sum is <code>4, −1, 2, 1,</code> with sum <code>6</code>.</p>\n<pre><code>Input  : [1, 2, 3, -2, 5]\nOutput : 9\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n;cin>>n;\n    vector&#x3C;int> v(n);\n    for(int i=0;i&#x3C;n;i++) cin>>v[i];\n    int sum=0,maxi_sum=0;\n    for(int i=0;i&#x3C;n;i++){\n        sum+=v[i];\n        maxi_sum=max(maxi_sum,sum);\n        if(sum&#x3C;0) sum=0;\n    }\n    cout&#x3C;&#x3C;maxi_sum&#x3C;&#x3C;'\\n';\n    return 0;\n}\n\n//Contributed by Raghav Garg\n</code></pre>\n<pre><code>public class FindTheMaximumSumOfAContiguousSubarray{\n//(kadane'sAlgorithm)\n    public static void main(String[] args) {\n    int[] numberArray = {-2, 1, 9, 4, -1, 2, -2, -5, 4};\n    System.out.println(\"Maximum contiguous sum is \"\n      +  maxSubArraySum(numberArray));\n  }\n  static int maxSubArraySum(int numberArray[]) \n    { \n        int max_so_far = numberArray[0]; \n        int curr_max = numberArray[0]; \n  \n        for (int i = 1; i &#x3C; numberArray.length; i++) \n        { \n            curr_max = Math.max(numberArray[i], curr_max+numberArray[i]); \n            max_so_far = Math.max(max_so_far, curr_max); \n        } \n        return max_so_far; \n    } \n}\n</code></pre>\n<pre><code>function maximumContiguousSum(arr){\n    let sum = 0;\n    let i = 0;\n    let maxsum = -Infinity;\n    while(i&#x3C;arr.length){\n        sum += arr[i];\n        maxsum = Math.max(maxsum,sum);\n        if(sum &#x3C; 0){\n            sum = 0;\n        }\n        i++;\n    }\n    return maxsum;\n}\n\nlet arr = [-2, -3, 4, -1, -2, 1, 5, -3];\nconsole.log(maximumContiguousSum(arr));   //7\n</code></pre>\n<pre><code>import kotlin.math.max\n\nfun main() {\n    val a = intArrayOf(-2, -3, 4, -1, -2, 1, 5, -3)\n    println(maxSubArraySum(a))\n}\n\n\nfun maxSubArraySum(a: IntArray): Int {\n    val size = a.size\n    var best = Int.MIN_VALUE\n    var sum = 0\n    for (i in 0 until size) {\n        sum = max(a[i], sum + a[i])\n        best = max(best, sum)\n    }\n    return best\n}\n</code></pre>\n<pre><code>module Subarray\n\n  def self.max_sub(arr)\n    \n    max_so_far = arr.first\n    max_ending_here = 0\n    start = 0\n    stop = 0\n    playhead = 0\n    \n    arr.each_with_index do |el, i|\n\n      max_ending_here += el\n      if max_so_far &#x3C; max_ending_here\n        max_so_far = max_ending_here \n        start = playhead\n        stop = i\n      end\n\n      if max_ending_here &#x3C; 0\n        max_ending_here = 0 \n        playhead = i+1\n      end\n\n    end\n\n    sub_arr_length = stop - start + 1\n    sub_arr = arr[start, sub_arr_length]\n    return max_so_far, sub_arr.to_s\n\n  end\n  \nend\n\narr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nputs Subarray.max_sub(arr)\n# => 6\n# => [4, -1, 2, 1]\n</code></pre>\n<pre><code>function maximumContiguousSum(arr: number[]): number {\n\n    let sum:number = 0;\n    let i:number = 0;\n    let maxsum:number = -Infinity;\n\n    while(i&#x3C;arr.length){\n        sum += arr[i];\n        maxsum = Math.max(maxsum,sum);\n        if(sum &#x3C; 0){\n            sum = 0;\n        }\n        i++;\n    }\n\n    return maxsum;\n}\n\n\nlet arr:number[] = [-2, -3, 4, -1, -2, 1, 5, -3];\nconsole.log(maximumContiguousSum(arr));   //7\n</code></pre>\n<pre><code># Python program to find maximum contiguous subarray\n\n\n# Function to find the maximum contiguous subarray\ndef maxSubArraySum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far &#x3C; max_ending_here:\n            max_so_far = max_ending_here\n\n        if max_ending_here &#x3C; 0:\n            max_ending_here = 0\n    return max_so_far\n\n\n# Driver function to check the above function\n\n\na = [-2, -3, 4, -1, -2, 1, 5, -3]\n\nprint(\"Maximum contiguous sum is\", maxSubArraySum(a, len(a)))\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\n// TC - O(n) | SC - O(1)\nfunc KadaneAlgorithm(array []int) int {\n\tmaxEndingHere := array[0]\n\tmaxSoFar := array[0]\n\n\tfor i := 1; i &#x3C; len(array); i++ {\n\t\tnum := array[i]\n\t\tmaxEndingHere = max(num, maxEndingHere+num)\n\t\tmaxSoFar = max(maxSoFar, maxEndingHere)\n\t}\n\treturn maxSoFar\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 3, -2, 5}\n\tarr2 := []int{2, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tarr3 := []int{31, -2, -3, -4, -5, -6, -7, -8, -9, -10}\n\tarr4 := []int{4, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10}\n\tarr5 := []int{5, 4, -6, 7, 8}\n\tfmt.Println(KadaneAlgorithm(arr1))\n\tfmt.Println(KadaneAlgorithm(arr2))\n\tfmt.Println(KadaneAlgorithm(arr3))\n\tfmt.Println(KadaneAlgorithm(arr4))\n\tfmt.Println(KadaneAlgorithm(arr5))\n}\n</code></pre>\n","markdown":"\n## Write a program to find the maximum sum of a contiguous subarray (kadane's algorithm)\n\nKadane's algorithm is used to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. For example, for the sequence of values `−2, 1, −3, 4, −1, 2, 1, −5, 4;` the contiguous subarray with the largest sum is `4, −1, 2, 1,` with sum `6`.\n\n```txt\nInput  : [1, 2, 3, -2, 5]\nOutput : 9\n```\n\n---\n\n<CodeBlock slug=\"find-the-maximum-sum-of-a-contiguous-subarray-(kadane's-algorithm)\" >\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n;cin>>n;\n    vector<int> v(n);\n    for(int i=0;i<n;i++) cin>>v[i];\n    int sum=0,maxi_sum=0;\n    for(int i=0;i<n;i++){\n        sum+=v[i];\n        maxi_sum=max(maxi_sum,sum);\n        if(sum<0) sum=0;\n    }\n    cout<<maxi_sum<<'\\n';\n    return 0;\n}\n\n//Contributed by Raghav Garg\n```\n\n```java\npublic class FindTheMaximumSumOfAContiguousSubarray{\n//(kadane'sAlgorithm)\n    public static void main(String[] args) {\n    int[] numberArray = {-2, 1, 9, 4, -1, 2, -2, -5, 4};\n    System.out.println(\"Maximum contiguous sum is \"\n      +  maxSubArraySum(numberArray));\n  }\n  static int maxSubArraySum(int numberArray[]) \n    { \n        int max_so_far = numberArray[0]; \n        int curr_max = numberArray[0]; \n  \n        for (int i = 1; i < numberArray.length; i++) \n        { \n            curr_max = Math.max(numberArray[i], curr_max+numberArray[i]); \n            max_so_far = Math.max(max_so_far, curr_max); \n        } \n        return max_so_far; \n    } \n}\n```\n\n```js\nfunction maximumContiguousSum(arr){\n    let sum = 0;\n    let i = 0;\n    let maxsum = -Infinity;\n    while(i<arr.length){\n        sum += arr[i];\n        maxsum = Math.max(maxsum,sum);\n        if(sum < 0){\n            sum = 0;\n        }\n        i++;\n    }\n    return maxsum;\n}\n\nlet arr = [-2, -3, 4, -1, -2, 1, 5, -3];\nconsole.log(maximumContiguousSum(arr));   //7\n```\n\n```kt\nimport kotlin.math.max\n\nfun main() {\n    val a = intArrayOf(-2, -3, 4, -1, -2, 1, 5, -3)\n    println(maxSubArraySum(a))\n}\n\n\nfun maxSubArraySum(a: IntArray): Int {\n    val size = a.size\n    var best = Int.MIN_VALUE\n    var sum = 0\n    for (i in 0 until size) {\n        sum = max(a[i], sum + a[i])\n        best = max(best, sum)\n    }\n    return best\n}\n```\n\n```rb\nmodule Subarray\n\n  def self.max_sub(arr)\n    \n    max_so_far = arr.first\n    max_ending_here = 0\n    start = 0\n    stop = 0\n    playhead = 0\n    \n    arr.each_with_index do |el, i|\n\n      max_ending_here += el\n      if max_so_far < max_ending_here\n        max_so_far = max_ending_here \n        start = playhead\n        stop = i\n      end\n\n      if max_ending_here < 0\n        max_ending_here = 0 \n        playhead = i+1\n      end\n\n    end\n\n    sub_arr_length = stop - start + 1\n    sub_arr = arr[start, sub_arr_length]\n    return max_so_far, sub_arr.to_s\n\n  end\n  \nend\n\narr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nputs Subarray.max_sub(arr)\n# => 6\n# => [4, -1, 2, 1]\n```\n\n```ts\nfunction maximumContiguousSum(arr: number[]): number {\n\n    let sum:number = 0;\n    let i:number = 0;\n    let maxsum:number = -Infinity;\n\n    while(i<arr.length){\n        sum += arr[i];\n        maxsum = Math.max(maxsum,sum);\n        if(sum < 0){\n            sum = 0;\n        }\n        i++;\n    }\n\n    return maxsum;\n}\n\n\nlet arr:number[] = [-2, -3, 4, -1, -2, 1, 5, -3];\nconsole.log(maximumContiguousSum(arr));   //7\n```\n\n```py\n# Python program to find maximum contiguous subarray\n\n\n# Function to find the maximum contiguous subarray\ndef maxSubArraySum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n\n\n# Driver function to check the above function\n\n\na = [-2, -3, 4, -1, -2, 1, 5, -3]\n\nprint(\"Maximum contiguous sum is\", maxSubArraySum(a, len(a)))\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\n// TC - O(n) | SC - O(1)\nfunc KadaneAlgorithm(array []int) int {\n\tmaxEndingHere := array[0]\n\tmaxSoFar := array[0]\n\n\tfor i := 1; i < len(array); i++ {\n\t\tnum := array[i]\n\t\tmaxEndingHere = max(num, maxEndingHere+num)\n\t\tmaxSoFar = max(maxSoFar, maxEndingHere)\n\t}\n\treturn maxSoFar\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 3, -2, 5}\n\tarr2 := []int{2, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tarr3 := []int{31, -2, -3, -4, -5, -6, -7, -8, -9, -10}\n\tarr4 := []int{4, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10}\n\tarr5 := []int{5, 4, -6, 7, 8}\n\tfmt.Println(KadaneAlgorithm(arr1))\n\tfmt.Println(KadaneAlgorithm(arr2))\n\tfmt.Println(KadaneAlgorithm(arr3))\n\tfmt.Println(KadaneAlgorithm(arr4))\n\tfmt.Println(KadaneAlgorithm(arr5))\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-02-23T07:25:43Z"}