{"slug":"print-reverse-of-a-number","title":"Print reverse of a number","trackId":3468,"tags":["Java","JavaScript","Kotlin","Ruby","TypeScript","Julia","PHP","Python","Scala","Scala","GO","PHP","Rust"],"contributors":["harshraj8843","esivakumar18","lukaszmielczarekdev","hi-Kartik2004","rafaover","rksp25","joao-vitor-souza","devkansara","grraghav120","CodingWithHardik","ba-p"],"contentHtml":"<h2>Write a program to print reverse of a number</h2>\n<p>Reverse of a number is the number obtained by reversing the digits of the original number. For example, the reverse of 123 is 321. The reverse of 100 is 1. The reverse of 1000 is 1.</p>\n<pre><code>Input  : 123\nOutput : 321\n</code></pre>\n<hr>\n<pre><code>import java.util.*;\nimport java.io.*;\nimport java.text.*;\npublic class Main\n{\n    public static int ReverseNo(int n){\n        int rev=0;\n        for(int i=n;i>0;i=i/10){\n            int mod=i%10;\n            rev=rev*10+mod;\n        }\n        return rev;\n    }\n    \n\tpublic static void main(String[] args) {\n\t    Scanner sc=new Scanner(System.in);\n\t    int n=sc.nextInt();\n\t\tSystem.out.println(ReverseNo(n));\n\t}\n}\n\n// Contributed by Raghav Garg (@grraghav120)\n</code></pre>\n<pre><code>let rev = 0;\nlet num = 123;\nlet lastDigit;\n\nwhile(num != 0){\n\tlastDigit = num % 10;\n  rev = rev * 10 + lastDigit;\n  num = Math.floor(num/10);\n}\n\nconsole.log(+rev);\n</code></pre>\n<pre><code>import java.util.Scanner\n\nfun main() {\n    print(\"Enter number : \")\n    println()\n    var min = readLine()\n\n    println(\"Reversed Number: \" + ReverseNumber(min!!.toInt()))\n\n}\n\nprivate fun ReverseNumber(num: Int): Int {\n    var reversed = 0\n    var num2= num\n\n    while (num2 != 0) {\n        val digit = num2 % 10\n        reversed = reversed * 10 + digit\n        num2 /= 10\n    }\n\n    return  reversed\n}\n</code></pre>\n<pre><code># reverse of a number\nputs \"Write a number to reverse: \"\nnumber_input = gets.chomp\nresult = number_input.to_s.reverse.to_i\n\nputs \"Here's your reversed number: #{result}\"\n</code></pre>\n<pre><code>const reverseNumber = (n: number) => {\n  const reversedNumber = n.toString().split(\"\").reverse().join(\"\");\n\n  return parseFloat(reversedNumber) * Math.sign(n);\n};\n\nconsole.log(reverseNumber(123));\n</code></pre>\n<pre><code># Write a Julia program to print reverse of a number\n\nprintln(reverse(\"GFG\"))\nprintln(reverse(\"gfg\"))\nprintln(reverse(\"Geeks\"))\nprintln(reverse(\"GeeksforGeeks\"))\n</code></pre>\n<pre><code>&#x3C;?php\n\t$num = readline('Enter a number: ');\n\t$x = 0;\n  $n =$num;\n   \n  while(floor($num))\n  {  \n    $mod = $num%10;\n    $x = $x * 10 + $mod;  \n    $num = $num/10;\n  }  \n  echo \"Reverse of $n is $x.\";\n?>\n</code></pre>\n<pre><code>print(input()[::-1])\n</code></pre>\n<pre><code>object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t var num = scala.io.StdIn.readInt();\n\t \n\t if (num > 0) println(num.toString.reverse.toInt )\n\t else println(-1 * ((num * -1).toString.reverse.toInt))\n\t}\n}\n</code></pre>\n<pre><code>object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t var num = scala.io.StdIn.readInt();\n\t \n\t if (num > 0) println(num.toString.reverse.toInt )\n\t else println(-1 * ((num * -1).toString.reverse.toInt))\n\t}\n}\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc reverse(s string) string {\n\trns := []rune(s)\n\tfor i, j := 0, len(rns)-1; i &#x3C; j; i, j = i+1, j-1 {\n\n\t\trns[i], rns[j] = rns[j], rns[i]\n\t}\n\n\treturn string(rns)\n}\n\nfunc main() {\n\n\tvar revnum string\n\n\tfmt.Print(\"Enter the Number to Reverse = \")\n\tfmt.Scanln(&#x26;revnum)\n\n\treverse := reverse(revnum)\n\n\tfmt.Println(\"The Reverse of the Given Number = \", reverse)\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\t$num = readline('Enter a number: ');\n\t$x = 0;\n  $n =$num;\n   \n  while(floor($num))\n  {  \n    $mod = $num%10;\n    $x = $x * 10 + $mod;  \n    $num = $num/10;\n  }  \n  echo \"Reverse of $n is $x.\";\n?>\n</code></pre>\n<pre><code>fn main() {\n    let nums = 1000;\n\n    // convert number to string\n    let str_nums = nums.to_string();\n\n    // reverse the string\n    let rev_str = str_nums.chars().rev().collect::&#x3C;String>();\n\n    // convert string to number\n    let result = rev_str.parse::&#x3C;i32>().unwrap();\n    \n    println!(\"{}\", result);\n}\n</code></pre>\n","markdown":"\n## Write a program to print reverse of a number\n\nReverse of a number is the number obtained by reversing the digits of the original number. For example, the reverse of 123 is 321. The reverse of 100 is 1. The reverse of 1000 is 1.\n\n```txt\nInput  : 123\nOutput : 321\n```\n\n---\n\n<CodeBlock slug=\"print-reverse-of-a-number\" >\n\n```java\nimport java.util.*;\nimport java.io.*;\nimport java.text.*;\npublic class Main\n{\n    public static int ReverseNo(int n){\n        int rev=0;\n        for(int i=n;i>0;i=i/10){\n            int mod=i%10;\n            rev=rev*10+mod;\n        }\n        return rev;\n    }\n    \n\tpublic static void main(String[] args) {\n\t    Scanner sc=new Scanner(System.in);\n\t    int n=sc.nextInt();\n\t\tSystem.out.println(ReverseNo(n));\n\t}\n}\n\n// Contributed by Raghav Garg (@grraghav120)\n```\n\n```js\nlet rev = 0;\nlet num = 123;\nlet lastDigit;\n\nwhile(num != 0){\n\tlastDigit = num % 10;\n  rev = rev * 10 + lastDigit;\n  num = Math.floor(num/10);\n}\n\nconsole.log(+rev);\n```\n\n```kt\nimport java.util.Scanner\n\nfun main() {\n    print(\"Enter number : \")\n    println()\n    var min = readLine()\n\n    println(\"Reversed Number: \" + ReverseNumber(min!!.toInt()))\n\n}\n\nprivate fun ReverseNumber(num: Int): Int {\n    var reversed = 0\n    var num2= num\n\n    while (num2 != 0) {\n        val digit = num2 % 10\n        reversed = reversed * 10 + digit\n        num2 /= 10\n    }\n\n    return  reversed\n}\n```\n\n```rb\n# reverse of a number\nputs \"Write a number to reverse: \"\nnumber_input = gets.chomp\nresult = number_input.to_s.reverse.to_i\n\nputs \"Here's your reversed number: #{result}\"\n```\n\n```ts\nconst reverseNumber = (n: number) => {\n  const reversedNumber = n.toString().split(\"\").reverse().join(\"\");\n\n  return parseFloat(reversedNumber) * Math.sign(n);\n};\n\nconsole.log(reverseNumber(123));\n```\n\n```jl\n# Write a Julia program to print reverse of a number\n\nprintln(reverse(\"GFG\"))\nprintln(reverse(\"gfg\"))\nprintln(reverse(\"Geeks\"))\nprintln(reverse(\"GeeksforGeeks\"))\n```\n\n```php\n<?php\n\t$num = readline('Enter a number: ');\n\t$x = 0;\n  $n =$num;\n   \n  while(floor($num))\n  {  \n    $mod = $num%10;\n    $x = $x * 10 + $mod;  \n    $num = $num/10;\n  }  \n  echo \"Reverse of $n is $x.\";\n?>\n```\n\n```py\nprint(input()[::-1])\n```\n\n```scala\nobject HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t var num = scala.io.StdIn.readInt();\n\t \n\t if (num > 0) println(num.toString.reverse.toInt )\n\t else println(-1 * ((num * -1).toString.reverse.toInt))\n\t}\n}\n```\n\n```scala\nobject HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t var num = scala.io.StdIn.readInt();\n\t \n\t if (num > 0) println(num.toString.reverse.toInt )\n\t else println(-1 * ((num * -1).toString.reverse.toInt))\n\t}\n}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc reverse(s string) string {\n\trns := []rune(s)\n\tfor i, j := 0, len(rns)-1; i < j; i, j = i+1, j-1 {\n\n\t\trns[i], rns[j] = rns[j], rns[i]\n\t}\n\n\treturn string(rns)\n}\n\nfunc main() {\n\n\tvar revnum string\n\n\tfmt.Print(\"Enter the Number to Reverse = \")\n\tfmt.Scanln(&revnum)\n\n\treverse := reverse(revnum)\n\n\tfmt.Println(\"The Reverse of the Given Number = \", reverse)\n}\n```\n\n```php\n<?php\n\t$num = readline('Enter a number: ');\n\t$x = 0;\n  $n =$num;\n   \n  while(floor($num))\n  {  \n    $mod = $num%10;\n    $x = $x * 10 + $mod;  \n    $num = $num/10;\n  }  \n  echo \"Reverse of $n is $x.\";\n?>\n```\n\n```rs\nfn main() {\n    let nums = 1000;\n\n    // convert number to string\n    let str_nums = nums.to_string();\n\n    // reverse the string\n    let rev_str = str_nums.chars().rev().collect::<String>();\n\n    // convert string to number\n    let result = rev_str.parse::<i32>().unwrap();\n    \n    println!(\"{}\", result);\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-06T04:30:23Z"}