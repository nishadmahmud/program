{"slug":"find-gcd-of-two-numbers-by-recursion","title":"Find GCD of two numbers by recursion","trackId":5186,"tags":["C","C++","C#","Java","JavaScript","TypeScript","Python","Haskell","PHP"],"contributors":["harshraj8843","anandfresh","leslieyip02","yashasvini121","sahdev77","yesayajones"],"contentHtml":"<h2>Write a program to find gcd of two numbers by recursion</h2>\n<p>GCD (Greatest Common Divisor) of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.</p>\n<pre><code>Input  : 12 18\nOutput : 6\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n \nint gcd(int a, int b)\n{\n\n    if (a == 0)\n       return b;\n    if (b == 0)\n       return a;\n \n    if (a == b)\n        return a;\n \n    if (a > b)\n        return gcd(a-b, b);\n    return gcd(a, b-a);\n}\n \nint main()\n{\n    int a = 12, b = 18;\n    printf(\"GCD of %d and %d is %d \", a, b, gcd(a, b));\n    return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n\nint gcd(int a, int b) {\n  if (b == 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\nint main() {\n  int a, b;\n  std::cout &#x3C;&#x3C; \"Enter two numbers: \";\n  std::cin >> a >> b;\n  std::cout &#x3C;&#x3C; \"GCD: \" &#x3C;&#x3C; gcd(a, b) &#x3C;&#x3C; std::endl;\n  return 0;\n}\n</code></pre>\n<pre><code>using System;\n\nclass GCD {\n  static int gcd(int x, int y) {\n    if (y == 0)\n      return x;\n    return gcd(y, x%y);\n  } \n\n  static void Main(string[] args) {\n    int x = 12;\n    int y = 18;\n\n    Console.WriteLine(\"GCD of \"+ x +\" and \"+ y +\" is: \"+ gcd(x,y));\n  }\n}\n</code></pre>\n<pre><code>import java.io.*;\nimport java.util.Scanner;\n\nclass GCD {\n    static int gcd(int a, int b) {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        sc.close();\n\n        System.out.println(\"GCD of \" + a + \" and \" + b + \" is \" + gcd(a, b));\n    }\n}\n</code></pre>\n<pre><code>function greatestCommonDenominator(a, b) {\n\t// the bigger number is always divided by the smaller one\n\tif (b === 0) return a;\n\n\t// recursively call the function\n\treturn greatestCommonDenominator(b, a % b);\n}\n\n//display greatest common denominator of 12 and 18\nconsole.log(greatestCommonDenominator(12, 18));\n</code></pre>\n<pre><code>const gcd = (x: number, y: number): number => {\n  if (y === 0) return x;\n  return gcd(y, x % y)\n}\n\nconsole.log(gcd(12, 18));\n</code></pre>\n<pre><code># Recursive function to return gcd of a and b\ndef recursiveGcd(a: int, b: int):\n    # Everything divides 0\n    if a == 0 or b == 0:\n        return a if a == 0 else b\n\n    # base case\n    if a == b:\n        return a\n\n    # a is greater\n    if a > b:\n        return recursiveGcd(a - b, b)\n    return recursiveGcd(a, b - a)\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"GCD of {x} and {y} : {recursiveGcd(x,y)}\")\n</code></pre>\n<pre><code>g :: Integer -> Integer -> Integer\ng x 0 = x\ng x y = g y (x `mod` y)\n\nmain = do\n    let n = 12\n    let m = 18\n\n    print $ g n m\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction gcd($x, $y) {\n  if ($y == 0)\n    return $x;\n  return gcd($y, $x%$y);\n}\n\necho gcd(12,18);\n\n?>\n</code></pre>\n","markdown":"\n## Write a program to find gcd of two numbers by recursion\n\nGCD (Greatest Common Divisor) of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.\n\n```txt\nInput  : 12 18\nOutput : 6\n```\n\n---\n\n<CodeBlock slug=\"find-gcd-of-two-numbers-by-recursion\" >\n\n```c\n#include <stdio.h>\n \nint gcd(int a, int b)\n{\n\n    if (a == 0)\n       return b;\n    if (b == 0)\n       return a;\n \n    if (a == b)\n        return a;\n \n    if (a > b)\n        return gcd(a-b, b);\n    return gcd(a, b-a);\n}\n \nint main()\n{\n    int a = 12, b = 18;\n    printf(\"GCD of %d and %d is %d \", a, b, gcd(a, b));\n    return 0;\n}\n```\n\n```cpp\n#include <iostream>\n\nint gcd(int a, int b) {\n  if (b == 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\nint main() {\n  int a, b;\n  std::cout << \"Enter two numbers: \";\n  std::cin >> a >> b;\n  std::cout << \"GCD: \" << gcd(a, b) << std::endl;\n  return 0;\n}\n```\n\n```cs\nusing System;\n\nclass GCD {\n  static int gcd(int x, int y) {\n    if (y == 0)\n      return x;\n    return gcd(y, x%y);\n  } \n\n  static void Main(string[] args) {\n    int x = 12;\n    int y = 18;\n\n    Console.WriteLine(\"GCD of \"+ x +\" and \"+ y +\" is: \"+ gcd(x,y));\n  }\n}\n```\n\n```java\nimport java.io.*;\nimport java.util.Scanner;\n\nclass GCD {\n    static int gcd(int a, int b) {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        sc.close();\n\n        System.out.println(\"GCD of \" + a + \" and \" + b + \" is \" + gcd(a, b));\n    }\n}\n```\n\n```js\nfunction greatestCommonDenominator(a, b) {\n\t// the bigger number is always divided by the smaller one\n\tif (b === 0) return a;\n\n\t// recursively call the function\n\treturn greatestCommonDenominator(b, a % b);\n}\n\n//display greatest common denominator of 12 and 18\nconsole.log(greatestCommonDenominator(12, 18));\n```\n\n```ts\nconst gcd = (x: number, y: number): number => {\n  if (y === 0) return x;\n  return gcd(y, x % y)\n}\n\nconsole.log(gcd(12, 18));\n```\n\n```py\n# Recursive function to return gcd of a and b\ndef recursiveGcd(a: int, b: int):\n    # Everything divides 0\n    if a == 0 or b == 0:\n        return a if a == 0 else b\n\n    # base case\n    if a == b:\n        return a\n\n    # a is greater\n    if a > b:\n        return recursiveGcd(a - b, b)\n    return recursiveGcd(a, b - a)\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"GCD of {x} and {y} : {recursiveGcd(x,y)}\")\n```\n\n```hs\ng :: Integer -> Integer -> Integer\ng x 0 = x\ng x y = g y (x `mod` y)\n\nmain = do\n    let n = 12\n    let m = 18\n\n    print $ g n m\n```\n\n```php\n<?php\n\nfunction gcd($x, $y) {\n  if ($y == 0)\n    return $x;\n  return gcd($y, $x%$y);\n}\n\necho gcd(12,18);\n\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-02-23T07:25:43Z"}