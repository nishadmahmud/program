{"slug":"find-power-of-a-number","title":"Find power of a number","trackId":5098,"tags":["C","C++","C#","Java","JavaScript","Kotlin","Ruby","Swift","TypeScript","Python","Swift","Scala","GO","PHP","Perl","Rust"],"contributors":["harshraj8843","esivakumar18","Osher160","anandfresh","Fukurokudzu","vedantpople4","AviadCohen24","Coder-12-ux","harsha-desaraju","hi-Kartik2004","hugosmoreira","mail2poonam89"],"contentHtml":"<h2>Write a program to find power of a number</h2>\n<p>Power of a number is the result of multiplying a number by itself a certain number of times. For example, 2^3 = 2 * 2 * 2 = 8. The number 2 is the base and 3 is the exponent.</p>\n<pre><code>Input  : 2 3\nOutput : 8\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h> /* printf, scanf */\n\n/* According to issue example, \nassuming that both num and expo are positive natural numbers*/\n\nint PowerOf(int num, int expo);\n\n\nint main()\n{\n    int num = 0;\n    int expo = 0;\n\n    int is_good =scanf(\"%d%d\",&#x26;num,&#x26;expo);\n\n    if(is_good != 2)\n    {\n        printf(\"scanf failed\\n\");\n        return -1;\n    }\n\n    printf(\"%d\\n\",PowerOf(num,expo));\n\n    return 0;\n}\n\n\nint PowerOf(int num, int expo)\n{\n    int ret = 1;\n    while(expo >= 1)\n    {\n        ret *= num;\n        --expo;\n    }\n\n    return ret;\n}\n</code></pre>\n<pre><code>// To find the power of a number...\n#include &#x3C;bits/stdc++.h>\n#define ll long long // For typing ease.\nusing namespace std;\n\nint main(){\n    ll n;   cin>>n; //Base\n    ll p;   cin>>p; //Power\n\n    //Using std function:\n    // cout&#x3C;&#x3C;pow(n,p)&#x3C;&#x3C;endl;\n\n    // Using loops:\n    ll product = 1;\n    for(int i=0;i&#x3C;p;i++){\n        product *= n;\n    }\n    cout&#x3C;&#x3C;product&#x3C;&#x3C;endl;\n    return 0;\n}\n\n/*\nAuthor : Kartikeya Saini\n*/\n</code></pre>\n<pre><code>using System;\nnamespace FindPowerOfANumber{\n    class PowerOfANumber{\n        static void Main(string[] args){\n            Console.WriteLine(\"Enter the base number\");\n            int baseNum = int.Parse(Console.ReadLine());\n            Console.WriteLine(\"Enter the power number\");\n            int powerNum = int.Parse(Console.ReadLine());\n            Console.WriteLine(Math.Pow(baseNum, powerNum));\n        }\n    }\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\nclass FindPowerOfANumber {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number: \");\n        int number = scanner.nextInt();\n        System.out.print(\"Enter the power: \");\n        int power = scanner.nextInt();\n\n        if(power &#x3C; 0 || number &#x3C; 0){\n            System.out.println(\"Invalid input/Power can't be negative\");\n        } else {\n\n            System.out.println(number + \"^\" + power + \" = \" + findPower(number, power));\n        }\n    }\n\n    private static long findPower(int number, int power) {\n        if(power == 0){\n            return 1;\n        } else {\n            return (long) Math.pow(number, power);\n        }\n    }\n}\n</code></pre>\n<pre><code>const powerOfNumber = (num, power) => {\n\tif (power &#x3C; 0 || num &#x3C; 0) {\n  \treturn \"Invalid Input\"\n  } else if(power == 0) {\n  \treturn 1;\n  } else {\n  \treturn Math.pow(num, power);\n  }\n}\n\nconsole.log(powerOfNumber(2, 3));\nconsole.log(powerOfNumber(2, 0));\nconsole.log(powerOfNumber(2, -3));\n</code></pre>\n<pre><code>import java.util.Scanner\n\nfun power(base: Int, exp: Int): Int {\n    var result = 1\n    var i = exp\n\n    while (i > 0) {\n        result *= base\n        i -= 1\n    }\n\n    return result\n}\n\nfun main() {\n    val inputReader = Scanner(System.`in`)\n    val base = inputReader.nextInt()\n    val exponent = inputReader.nextInt()\n\n    println(power(base, exponent))\n}\n</code></pre>\n<pre><code>module Power\n\n  def self.power(num, pow)\n    num**pow\n    \n    # # Another Way\n    # result = num\n    # (pow-1).times { |i| result *= num }\n    # result\n  end\n  \nend\n\nputs Power.power(2, 3) # => 8\n</code></pre>\n<pre><code>import Swift\nimport Foundation\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Enter power: \")\nvar power = Int(readLine()!)!\n\nvar result = 1;\nfor val in 1...power {\n  result = result * number;\n}\n\nprint(\"Result: \", result)\n</code></pre>\n<pre><code>const powerOfNumber = (num: number, power: number) : number => {\n  return Math.pow(num, power);\n}\n\nconsole.log(powerOfNumber(2, 3))\n</code></pre>\n<pre><code># Program for finding the power of number\n\n# Input a- number , n-power\n# Output a^n\n\nimport math\n\na, n = list(map(float, input().split()))\n\nprint(round(math.pow(a, n), 3))\n</code></pre>\n<pre><code>import Swift\nimport Foundation\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Enter power: \")\nvar power = Int(readLine()!)!\n\nvar result = 1;\nfor val in 1...power {\n  result = result * number;\n}\n\nprint(\"Result: \", result)\n</code></pre>\n<pre><code>import scala.io.StdIn._;\n\nobject powerOfNumber {\n    def main(args:Array[String]):Unit={\n        println(\"Enter a number : \");\n        var n = readLine().toInt;\n        println(\"Enter the power : \");\n        var p = readLine().toInt;\n        var result = scala.math.pow(n,p);\n        println(\"Power of the given number : \"+result);\n    }\n}\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tvar base int\n\tvar exponent int\n\tfmt.Scanf(\"%d\", &#x26;base)\n\tfmt.Scanf(\"%d\", &#x26;exponent)\n\tanswer := math.Pow(float64(base), float64(exponent))\n\tfmt.Println(answer)\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction powerOfNumber($num, $power) {\n  if($num &#x3C; 0 || $power &#x3C; 0) {\n    return \"Invalid Input\";\n  } else if ($power == 0) {\n    return 1;\n  } else {\n    return pow($num, $power);\n  }\n}\n\necho powerOfNumber(2, 3);\necho powerOfNumber(2, -3);\necho powerOfNumber(2, 0);\n\n?>\n</code></pre>\n<pre><code>#!/usr/bin/perl\nuse warnings;\nuse strict;\nprint \"Enter a number : \";\nmy $number = &#x3C;STDIN>;\nprint \"Enter the power : \";\nmy $power = &#x3C;STDIN>;\nprint $number**$power, \"\\n\";\n</code></pre>\n<pre><code>fn main() {\n    // Get the base and exponent from the user\n    let base = 2;\n    let exponent = 3;\n\n    // Calculate the result\n    let result = base.pow(exponent);\n\n    // Print the result\n    println!(\"{}^{} = {}\", base, exponent, result);\n}\n</code></pre>\n","markdown":"\n## Write a program to find power of a number\n\nPower of a number is the result of multiplying a number by itself a certain number of times. For example, 2^3 = 2 * 2 * 2 = 8. The number 2 is the base and 3 is the exponent.\n\n```txt\nInput  : 2 3\nOutput : 8\n```\n\n---\n\n<CodeBlock slug=\"find-power-of-a-number\" >\n\n```c\n#include <stdio.h> /* printf, scanf */\n\n/* According to issue example, \nassuming that both num and expo are positive natural numbers*/\n\nint PowerOf(int num, int expo);\n\n\nint main()\n{\n    int num = 0;\n    int expo = 0;\n\n    int is_good =scanf(\"%d%d\",&num,&expo);\n\n    if(is_good != 2)\n    {\n        printf(\"scanf failed\\n\");\n        return -1;\n    }\n\n    printf(\"%d\\n\",PowerOf(num,expo));\n\n    return 0;\n}\n\n\nint PowerOf(int num, int expo)\n{\n    int ret = 1;\n    while(expo >= 1)\n    {\n        ret *= num;\n        --expo;\n    }\n\n    return ret;\n}\n```\n\n```cpp\n// To find the power of a number...\n#include <bits/stdc++.h>\n#define ll long long // For typing ease.\nusing namespace std;\n\nint main(){\n    ll n;   cin>>n; //Base\n    ll p;   cin>>p; //Power\n\n    //Using std function:\n    // cout<<pow(n,p)<<endl;\n\n    // Using loops:\n    ll product = 1;\n    for(int i=0;i<p;i++){\n        product *= n;\n    }\n    cout<<product<<endl;\n    return 0;\n}\n\n/*\nAuthor : Kartikeya Saini\n*/\n```\n\n```cs\nusing System;\nnamespace FindPowerOfANumber{\n    class PowerOfANumber{\n        static void Main(string[] args){\n            Console.WriteLine(\"Enter the base number\");\n            int baseNum = int.Parse(Console.ReadLine());\n            Console.WriteLine(\"Enter the power number\");\n            int powerNum = int.Parse(Console.ReadLine());\n            Console.WriteLine(Math.Pow(baseNum, powerNum));\n        }\n    }\n}\n```\n\n```java\nimport java.util.Scanner;\n\nclass FindPowerOfANumber {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number: \");\n        int number = scanner.nextInt();\n        System.out.print(\"Enter the power: \");\n        int power = scanner.nextInt();\n\n        if(power < 0 || number < 0){\n            System.out.println(\"Invalid input/Power can't be negative\");\n        } else {\n\n            System.out.println(number + \"^\" + power + \" = \" + findPower(number, power));\n        }\n    }\n\n    private static long findPower(int number, int power) {\n        if(power == 0){\n            return 1;\n        } else {\n            return (long) Math.pow(number, power);\n        }\n    }\n}\n```\n\n```js\nconst powerOfNumber = (num, power) => {\n\tif (power < 0 || num < 0) {\n  \treturn \"Invalid Input\"\n  } else if(power == 0) {\n  \treturn 1;\n  } else {\n  \treturn Math.pow(num, power);\n  }\n}\n\nconsole.log(powerOfNumber(2, 3));\nconsole.log(powerOfNumber(2, 0));\nconsole.log(powerOfNumber(2, -3));\n```\n\n```kt\nimport java.util.Scanner\n\nfun power(base: Int, exp: Int): Int {\n    var result = 1\n    var i = exp\n\n    while (i > 0) {\n        result *= base\n        i -= 1\n    }\n\n    return result\n}\n\nfun main() {\n    val inputReader = Scanner(System.`in`)\n    val base = inputReader.nextInt()\n    val exponent = inputReader.nextInt()\n\n    println(power(base, exponent))\n}\n```\n\n```rb\nmodule Power\n\n  def self.power(num, pow)\n    num**pow\n    \n    # # Another Way\n    # result = num\n    # (pow-1).times { |i| result *= num }\n    # result\n  end\n  \nend\n\nputs Power.power(2, 3) # => 8\n```\n\n```swift\nimport Swift\nimport Foundation\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Enter power: \")\nvar power = Int(readLine()!)!\n\nvar result = 1;\nfor val in 1...power {\n  result = result * number;\n}\n\nprint(\"Result: \", result)\n```\n\n```ts\nconst powerOfNumber = (num: number, power: number) : number => {\n  return Math.pow(num, power);\n}\n\nconsole.log(powerOfNumber(2, 3))\n```\n\n```py\n# Program for finding the power of number\n\n# Input a- number , n-power\n# Output a^n\n\nimport math\n\na, n = list(map(float, input().split()))\n\nprint(round(math.pow(a, n), 3))\n```\n\n```swift\nimport Swift\nimport Foundation\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Enter power: \")\nvar power = Int(readLine()!)!\n\nvar result = 1;\nfor val in 1...power {\n  result = result * number;\n}\n\nprint(\"Result: \", result)\n```\n\n```scala\nimport scala.io.StdIn._;\n\nobject powerOfNumber {\n    def main(args:Array[String]):Unit={\n        println(\"Enter a number : \");\n        var n = readLine().toInt;\n        println(\"Enter the power : \");\n        var p = readLine().toInt;\n        var result = scala.math.pow(n,p);\n        println(\"Power of the given number : \"+result);\n    }\n}\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tvar base int\n\tvar exponent int\n\tfmt.Scanf(\"%d\", &base)\n\tfmt.Scanf(\"%d\", &exponent)\n\tanswer := math.Pow(float64(base), float64(exponent))\n\tfmt.Println(answer)\n}\n```\n\n```php\n<?php\n\nfunction powerOfNumber($num, $power) {\n  if($num < 0 || $power < 0) {\n    return \"Invalid Input\";\n  } else if ($power == 0) {\n    return 1;\n  } else {\n    return pow($num, $power);\n  }\n}\n\necho powerOfNumber(2, 3);\necho powerOfNumber(2, -3);\necho powerOfNumber(2, 0);\n\n?>\n```\n\n```pl\n#!/usr/bin/perl\nuse warnings;\nuse strict;\nprint \"Enter a number : \";\nmy $number = <STDIN>;\nprint \"Enter the power : \";\nmy $power = <STDIN>;\nprint $number**$power, \"\\n\";\n```\n\n```rs\nfn main() {\n    // Get the base and exponent from the user\n    let base = 2;\n    let exponent = 3;\n\n    // Calculate the result\n    let result = base.pow(exponent);\n\n    // Print the result\n    println!(\"{}^{} = {}\", base, exponent, result);\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-06T05:38:58Z"}