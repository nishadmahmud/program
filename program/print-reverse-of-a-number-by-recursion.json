{"slug":"print-reverse-of-a-number-by-recursion","title":"Print reverse of a number by recursion","trackId":5554,"tags":["C","C++","C#","Java","JavaScript","Ruby","TypeScript","Python","Scala","Dart","Haskell","PHP","R","Rust"],"contributors":["ANUSHRAV01","anandfresh","harshraj8843","leslieyip02","kavish2003","james-tharit","UrielOfir","grraghav120","jfinley6","chinne"],"contentHtml":"<h2>Write a program to print reverse of a number by recursion</h2>\n<p>Reverse of a number is the number obtained by reversing the digits of the original number. For example, reverse of 123 is 321. The recursive solution is to print the last digit of the number and then call the function recursively to print the remaining digits.</p>\n<pre><code>Input  : 123\nOutput : 321\n</code></pre>\n<hr>\n<pre><code>#include&#x3C;stdio.h>\n\nint main()\n{\n\nint n,remainder,reverse=0;\nscanf(\"%d\",&#x26;n);\n\nwhile(n!=0)\n{\n\tremainder = n % 10;\n    reverse = reverse * 10 + remainder;\n    n /= 10;\n}\n\nprintf(\"%d\",reverse);\nreturn 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;bits/stdc++.h>\nusing namespace std;\nvoid reverseANumber(int n){\n    if(n&#x3C;=9) cout&#x3C;&#x3C;n&#x3C;&#x3C;'\\n';\n    else{\n        cout&#x3C;&#x3C;(n%10);\n        reverseANumber(n/10);\n    }    \n}\nint main(){\n    int num; //123\n    cin>>num;\n    reverseANumber(num); //321\n    return 0;\n}\n\n//Contributed by Raghav Garg\n</code></pre>\n<pre><code>using System;  \npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        reverse(123);\n    }\n\n    public static int reverted=0;\n\n    public static void reverse(int number)\n    {\n        if (number!=0)\n        {\n            int remainder = number % 10;\n            reverted = (reverted*10)+remainder;\n            reverse(number/10);\n        } \n        else\n            Console.WriteLine(reverted);\n    }\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\nclass RecursionReverse\n{\n   public static void reverseMethod(int number) {\n       if (number &#x3C; 10) {\n\t   System.out.println(number);\n\t   return;\n       }\n       else {\n           System.out.print(number % 10);\n           reverseMethod(number/10);\n       }\n   }\n   public static void main(String args[])\n   {\n\tint num=0;\n\tSystem.out.print(\"Please enter a number : \");\n\tScanner in = new Scanner(System.in);\n\tnum = in.nextInt();\n\tSystem.out.print(\"Reverse of the given number is: \");\n\treverseMethod(num);\n\tSystem.out.println();\n   }\n}\n</code></pre>\n<pre><code>const reverseNum = (num) => {\n   return num &#x3C; 10 ? String(num) : String(num % 10) + reverseNum (Math .floor (num / 10));\n}\n\nconsole.log (reverseNum (8675309));\n</code></pre>\n<pre><code>def reverseNum num \n    return num if num.to_s.length &#x3C;= 1\n\n    reversedNum = reverseNum(num.to_s[1..-1])\n    reversedNum += num.to_s[0]\n    reversedNum\nend\n\nputs reverseNum 12345\n</code></pre>\n<pre><code>const reverseNum = (num: number): string => {\n   return num &#x3C; 10 ? String(num) : String(num % 10) + reverseNum (Math .floor (num / 10));\n}\n\nconsole.log (reverseNum (8675309));\n</code></pre>\n<pre><code>def reverse_num(num: int, reversed_num: int = 0) -> int:\n    # Base case: if the number is 0, there are no more digits to reverse\n    if num == 0:\n        return reversed_num\n\n    # Get the last digit of the number\n    last_digit = num % 10\n\n    # Add the last digit to the beginning of the reversed number\n    reversed_num = reversed_num * 10 + last_digit\n\n    # Recursively call the function to reverse the remaining digits\n    return reverse_num(num // 10, reversed_num)\n\n\n# Test the function with a few examples\nprint(reverse_num(123))  # should print 321\nprint(reverse_num(7331))  # should print 1337\nprint(reverse_num(87124389372498))  # should print 89427398342178\n</code></pre>\n<pre><code>def reverseIntList(x: Int): List[Int]  = {\n    if (!(x &#x3C;= 0))\n      if ((x &#x3C; 10))\n        List(x)\n      else\n        x % 10 :: reverseIntList(x / 10)\n    else\n      List()\n\n  }\n  \n  print(reverseIntList(123))\n</code></pre>\n<pre><code>String _reverseNum(String num, {String reversed = ''}) {\n  // Base, will return in last sequence, when no more digits to reverse\n  if (num.length == 1) return '${reversed.toString()}${num}';\n\n  String last_digit = num.split(\"\").last; // Get the last digit of the number\n  String _reversed =\n      \"${reversed}${last_digit}\"; // Add last digit to the beginning of the reversed\n  List&#x3C;String> a = num.split('');\n  a.removeLast();\n\n  String next = a.join();\n\n  return _reverseNum(next,\n      reversed:\n          _reversed); // Recursively call the function with remaining digits\n}\n\nvoid main() {\n  print(_reverseNum('123000')); // will print 000321\n  print(_reverseNum('123456789')); // will print 987654321\n  print(_reverseNum('0100100')); // will print 0010010\n  print(_reverseNum('0023400567')); // will print 7650043200\n}\n</code></pre>\n<pre><code>f :: Integer -> [Integer]\nf 0 = []\nf x = (x `mod` 10) : f (x `div` 10)\n\nmain :: IO()\nmain =  do\n    let n = 123\n    let r = concat . map show $ f n\n    \n    putStrLn r\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction reverseNumber($num)\n{\n $n = strlen($num);\n if($n === 1)\n   {\n    return $num;\n   }\n else\n   {\n   $n--;\n   return reverseNumber(substr($num,1, $n)) . substr($num, 0, 1);\n   }\n}\nprint_r(reverseNumber(123).\"\\n\");\n\n?>\n</code></pre>\n<pre><code>reverse_number &#x3C;- function(n) {\n  # base case: if the number has only one digit, return it\n  if (n &#x3C; 10) {\n    return(n)\n  } else {\n    # recursive case: extract the last digit of the number and append it to the\n    # reversed version of the remaining digits\n    last_digit &#x3C;- n %% 10\n    remaining_digits &#x3C;- n %/% 10\n    return(last_digit * 10^(nchar(as.character(remaining_digits))) + reverse_number(remaining_digits))\n  }\n}\n\n# example usage\nnum &#x3C;- 12345\ncat(\"Original number:\", num, \"\\n\")\ncat(\"Reversed number:\", reverse_number(num), \"\\n\")\n</code></pre>\n<pre><code>fn print_reverse(n: u32) {\n    if n == 0 {\n        return;\n    }\n\n    print!(\"{}\", n % 10);\n    return print_reverse(n / 10);\n}\n\nfn main() {\n    print_reverse(123);\n}\n</code></pre>\n","markdown":"\n## Write a program to print reverse of a number by recursion\n\nReverse of a number is the number obtained by reversing the digits of the original number. For example, reverse of 123 is 321. The recursive solution is to print the last digit of the number and then call the function recursively to print the remaining digits.\n\n```txt\nInput  : 123\nOutput : 321\n```\n\n---\n\n<CodeBlock slug=\"print-reverse-of-a-number-by-recursion\" >\n\n```c\n#include<stdio.h>\n\nint main()\n{\n\nint n,remainder,reverse=0;\nscanf(\"%d\",&n);\n\nwhile(n!=0)\n{\n\tremainder = n % 10;\n    reverse = reverse * 10 + remainder;\n    n /= 10;\n}\n\nprintf(\"%d\",reverse);\nreturn 0;\n}\n```\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nvoid reverseANumber(int n){\n    if(n<=9) cout<<n<<'\\n';\n    else{\n        cout<<(n%10);\n        reverseANumber(n/10);\n    }    \n}\nint main(){\n    int num; //123\n    cin>>num;\n    reverseANumber(num); //321\n    return 0;\n}\n\n//Contributed by Raghav Garg\n```\n\n```cs\nusing System;  \npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        reverse(123);\n    }\n\n    public static int reverted=0;\n\n    public static void reverse(int number)\n    {\n        if (number!=0)\n        {\n            int remainder = number % 10;\n            reverted = (reverted*10)+remainder;\n            reverse(number/10);\n        } \n        else\n            Console.WriteLine(reverted);\n    }\n}\n```\n\n```java\nimport java.util.Scanner;\nclass RecursionReverse\n{\n   public static void reverseMethod(int number) {\n       if (number < 10) {\n\t   System.out.println(number);\n\t   return;\n       }\n       else {\n           System.out.print(number % 10);\n           reverseMethod(number/10);\n       }\n   }\n   public static void main(String args[])\n   {\n\tint num=0;\n\tSystem.out.print(\"Please enter a number : \");\n\tScanner in = new Scanner(System.in);\n\tnum = in.nextInt();\n\tSystem.out.print(\"Reverse of the given number is: \");\n\treverseMethod(num);\n\tSystem.out.println();\n   }\n}\n```\n\n```js\nconst reverseNum = (num) => {\n   return num < 10 ? String(num) : String(num % 10) + reverseNum (Math .floor (num / 10));\n}\n\nconsole.log (reverseNum (8675309));\n```\n\n```rb\ndef reverseNum num \n    return num if num.to_s.length <= 1\n\n    reversedNum = reverseNum(num.to_s[1..-1])\n    reversedNum += num.to_s[0]\n    reversedNum\nend\n\nputs reverseNum 12345\n```\n\n```ts\nconst reverseNum = (num: number): string => {\n   return num < 10 ? String(num) : String(num % 10) + reverseNum (Math .floor (num / 10));\n}\n\nconsole.log (reverseNum (8675309));\n```\n\n```py\ndef reverse_num(num: int, reversed_num: int = 0) -> int:\n    # Base case: if the number is 0, there are no more digits to reverse\n    if num == 0:\n        return reversed_num\n\n    # Get the last digit of the number\n    last_digit = num % 10\n\n    # Add the last digit to the beginning of the reversed number\n    reversed_num = reversed_num * 10 + last_digit\n\n    # Recursively call the function to reverse the remaining digits\n    return reverse_num(num // 10, reversed_num)\n\n\n# Test the function with a few examples\nprint(reverse_num(123))  # should print 321\nprint(reverse_num(7331))  # should print 1337\nprint(reverse_num(87124389372498))  # should print 89427398342178\n```\n\n```scala\ndef reverseIntList(x: Int): List[Int]  = {\n    if (!(x <= 0))\n      if ((x < 10))\n        List(x)\n      else\n        x % 10 :: reverseIntList(x / 10)\n    else\n      List()\n\n  }\n  \n  print(reverseIntList(123))\n```\n\n```dart\nString _reverseNum(String num, {String reversed = ''}) {\n  // Base, will return in last sequence, when no more digits to reverse\n  if (num.length == 1) return '${reversed.toString()}${num}';\n\n  String last_digit = num.split(\"\").last; // Get the last digit of the number\n  String _reversed =\n      \"${reversed}${last_digit}\"; // Add last digit to the beginning of the reversed\n  List<String> a = num.split('');\n  a.removeLast();\n\n  String next = a.join();\n\n  return _reverseNum(next,\n      reversed:\n          _reversed); // Recursively call the function with remaining digits\n}\n\nvoid main() {\n  print(_reverseNum('123000')); // will print 000321\n  print(_reverseNum('123456789')); // will print 987654321\n  print(_reverseNum('0100100')); // will print 0010010\n  print(_reverseNum('0023400567')); // will print 7650043200\n}\n```\n\n```hs\nf :: Integer -> [Integer]\nf 0 = []\nf x = (x `mod` 10) : f (x `div` 10)\n\nmain :: IO()\nmain =  do\n    let n = 123\n    let r = concat . map show $ f n\n    \n    putStrLn r\n```\n\n```php\n<?php\n\nfunction reverseNumber($num)\n{\n $n = strlen($num);\n if($n === 1)\n   {\n    return $num;\n   }\n else\n   {\n   $n--;\n   return reverseNumber(substr($num,1, $n)) . substr($num, 0, 1);\n   }\n}\nprint_r(reverseNumber(123).\"\\n\");\n\n?>\n```\n\n```r\nreverse_number <- function(n) {\n  # base case: if the number has only one digit, return it\n  if (n < 10) {\n    return(n)\n  } else {\n    # recursive case: extract the last digit of the number and append it to the\n    # reversed version of the remaining digits\n    last_digit <- n %% 10\n    remaining_digits <- n %/% 10\n    return(last_digit * 10^(nchar(as.character(remaining_digits))) + reverse_number(remaining_digits))\n  }\n}\n\n# example usage\nnum <- 12345\ncat(\"Original number:\", num, \"\\n\")\ncat(\"Reversed number:\", reverse_number(num), \"\\n\")\n```\n\n```rs\nfn print_reverse(n: u32) {\n    if n == 0 {\n        return;\n    }\n\n    print!(\"{}\", n % 10);\n    return print_reverse(n / 10);\n}\n\nfn main() {\n    print_reverse(123);\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-02-23T07:09:02Z"}