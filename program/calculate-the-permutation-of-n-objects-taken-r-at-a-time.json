{"slug":"calculate-the-permutation-of-n-objects-taken-r-at-a-time","title":"Calculate the permutation of n objects taken r at a time","trackId":4194,"tags":["C++","Java","JavaScript","TypeScript","Python","Scala","GO","Rust"],"contributors":["harshraj8843","cacti23","BrokenDesign"],"contentHtml":"<h2>Write a program to calculate the permutation of n objects taken r at a time</h2>\n<p>Permutation is an arrangement of objects in a particular order. The number of permutations on n objects taken r at a time is given by the formula n!/(n-r)!</p>\n<pre><code>Input  : 5, 2\nOutput : 20\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;iostream>\n\nusing namespace std;\n\nint factorial(int n) {\n  if (n == 0) {\n    return 1;\n  }\n\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n, r;\n  cout &#x3C;&#x3C; \"Enter value of n and r: \";\n  cin >> n >> r;\n\n  if (r > n) {\n    cout &#x3C;&#x3C; \"Error: r should be less than or equal to n.\" &#x3C;&#x3C; endl;\n    return 1;\n  }\n\n  int result = 1;\n\n  if (r == 0) {\n    result = 1;\n  } else if (r == 1) {\n    result = n;\n  } else if (n == r || n - 1 == r) {\n    result = factorial(n);\n  } else {\n    for (int i = 0; i &#x3C; n - r; ++i) {\n      result *= n - i;\n    }\n  }\n\n  cout &#x3C;&#x3C; \"Permutation of \" &#x3C;&#x3C; n &#x3C;&#x3C; \" objects taken \" &#x3C;&#x3C; r &#x3C;&#x3C; \" at a time is: \" &#x3C;&#x3C; result &#x3C;&#x3C; endl;\n  return 0;\n}\n</code></pre>\n<pre><code>public class CalculateThePermutationsOfNObjectsTakenAtTime {\n\n  public static void main(String[] args) {\n    if(args.length == 2) {\n      int n = 0;\n      int r = 0;\n      try {\n        n = Integer.parseInt(args[0]);\n        r = Integer.parseInt(args[1]);\n      } catch(Exception error){\n        throw new IllegalArgumentException(\"Error parsing arguments: \"+args.toString());\n      }\n      System.out.println(permutations(n, r));\n    }\n    else {\n      throw new IllegalArgumentException(\n        \"Expected two arguments, received \" + args.length + \" arguments\"\n      ) ;\n    }\n  }\n\n  public static int factorial(int num) {\n      if (num == 0) return 1;\n      return num * factorial(num - 1);\n  }\n\n  public static int permutations(int total, int sample) {\n    try {\n      return factorial(total)/factorial(total-sample);\n    }\n    catch(Exception error){\n      throw error;\n    }\n  }\n}\n</code></pre>\n<pre><code>function factorial(num) {\n    if (num == 0) return 1\n    return num * factorial(num - 1)\n}\n\nfunction permutations(total, sample) {\n  try {\n    return factorial(total)/factorial(total-sample)\n  }\n  catch(error){\n    throw error\n  }\n}\n\nconsole.log(permutations(5, 2))\n</code></pre>\n<pre><code>function factorial(num: number) : number {\n    if (num == 0) return 1\n    return num * factorial(num - 1)\n}\n\nfunction permutations(total: number, sample:number) : number {\n  if(total>sample){\n    return factorial(total)/factorial(total-sample)\n  } else {\n    throw new Error(`ERROR: supplied total > sample; permutations(total=${total}, sample=${sample})`)\n  }\n}\n\nconsole.log(permutations(5, 2))\n</code></pre>\n<pre><code>def factorial(x):\n    if x == 1 or 0:\n        return 1\n    return x * factorial(x - 1)\n\n\nn, r = map(int, input().split())\n\nprint(factorial(n) // factorial(n - r))\n</code></pre>\n<pre><code>def factorial(num: Integer): Integer = {\n    if (num == 0) return 1\n        return num * factorial(num - 1)\n    }\n\ndef permutations(total: Integer, sample: Integer): Integer = {\n    if(total > sample) {\n        return factorial(total)/factorial(total-sample)\n    } else {\n        throw new Exception(s\"ERROR: supplied total > sample; permutations(total=${total}, sample=${sample})\")\n    }\n}\n\nprintln(permutations(5, 2))\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc factorial(num int) int {\n\tif num == 0 {\n\t\treturn 1\n\t} else {\n\t\treturn num * factorial(num-1)\n\t}\n}\n\nfunc permutations(total int, sample int) (int, error) {\n\tvar value int\n\tvar error error\n\tif total > sample {\n\t\tvalue = factorial(total) / factorial(total-sample)\n\t} else {\n\t\terror = errors.New(fmt.Sprintf(\"ERROR: supplied total > sample; permutations(total=%d, sample=%d)\", total, sample))\n\t}\n\treturn value, error\n}\n\nfunc main() {\n\tvar result, err = permutations(5, 2)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(result)\n}\n</code></pre>\n<pre><code>fn factorial(num: i64) -> i64 {\n    if num == 0 {\n        return 1;\n    } else {\n        return num * factorial(num - 1);\n    }\n}\n\nfn permutations(total: i64, sample: i64) -> i64 {\n    if total > sample {\n        return factorial(total) / factorial(total - sample);\n    } else {\n        panic!(\n            \"ERROR: supplied total > sample; permutations(total={}, sample={})\",\n            total, sample\n        )\n    }\n}\n\nfn main() -> () {\n    println!(\"{}\", permutations(5, 2))\n}\n</code></pre>\n","markdown":"\n## Write a program to calculate the permutation of n objects taken r at a time\n\nPermutation is an arrangement of objects in a particular order. The number of permutations on n objects taken r at a time is given by the formula n!/(n-r)!\n\n```txt\nInput  : 5, 2\nOutput : 20\n```\n\n---\n\n<CodeBlock slug=\"calculate-the-permutation-of-n-objects-taken-r-at-a-time\" >\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint factorial(int n) {\n  if (n == 0) {\n    return 1;\n  }\n\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n, r;\n  cout << \"Enter value of n and r: \";\n  cin >> n >> r;\n\n  if (r > n) {\n    cout << \"Error: r should be less than or equal to n.\" << endl;\n    return 1;\n  }\n\n  int result = 1;\n\n  if (r == 0) {\n    result = 1;\n  } else if (r == 1) {\n    result = n;\n  } else if (n == r || n - 1 == r) {\n    result = factorial(n);\n  } else {\n    for (int i = 0; i < n - r; ++i) {\n      result *= n - i;\n    }\n  }\n\n  cout << \"Permutation of \" << n << \" objects taken \" << r << \" at a time is: \" << result << endl;\n  return 0;\n}\n```\n\n```java\npublic class CalculateThePermutationsOfNObjectsTakenAtTime {\n\n  public static void main(String[] args) {\n    if(args.length == 2) {\n      int n = 0;\n      int r = 0;\n      try {\n        n = Integer.parseInt(args[0]);\n        r = Integer.parseInt(args[1]);\n      } catch(Exception error){\n        throw new IllegalArgumentException(\"Error parsing arguments: \"+args.toString());\n      }\n      System.out.println(permutations(n, r));\n    }\n    else {\n      throw new IllegalArgumentException(\n        \"Expected two arguments, received \" + args.length + \" arguments\"\n      ) ;\n    }\n  }\n\n  public static int factorial(int num) {\n      if (num == 0) return 1;\n      return num * factorial(num - 1);\n  }\n\n  public static int permutations(int total, int sample) {\n    try {\n      return factorial(total)/factorial(total-sample);\n    }\n    catch(Exception error){\n      throw error;\n    }\n  }\n}\n```\n\n```js\nfunction factorial(num) {\n    if (num == 0) return 1\n    return num * factorial(num - 1)\n}\n\nfunction permutations(total, sample) {\n  try {\n    return factorial(total)/factorial(total-sample)\n  }\n  catch(error){\n    throw error\n  }\n}\n\nconsole.log(permutations(5, 2))\n```\n\n```ts\nfunction factorial(num: number) : number {\n    if (num == 0) return 1\n    return num * factorial(num - 1)\n}\n\nfunction permutations(total: number, sample:number) : number {\n  if(total>sample){\n    return factorial(total)/factorial(total-sample)\n  } else {\n    throw new Error(`ERROR: supplied total > sample; permutations(total=${total}, sample=${sample})`)\n  }\n}\n\nconsole.log(permutations(5, 2))\n```\n\n```py\ndef factorial(x):\n    if x == 1 or 0:\n        return 1\n    return x * factorial(x - 1)\n\n\nn, r = map(int, input().split())\n\nprint(factorial(n) // factorial(n - r))\n```\n\n```scala\ndef factorial(num: Integer): Integer = {\n    if (num == 0) return 1\n        return num * factorial(num - 1)\n    }\n\ndef permutations(total: Integer, sample: Integer): Integer = {\n    if(total > sample) {\n        return factorial(total)/factorial(total-sample)\n    } else {\n        throw new Exception(s\"ERROR: supplied total > sample; permutations(total=${total}, sample=${sample})\")\n    }\n}\n\nprintln(permutations(5, 2))\n```\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc factorial(num int) int {\n\tif num == 0 {\n\t\treturn 1\n\t} else {\n\t\treturn num * factorial(num-1)\n\t}\n}\n\nfunc permutations(total int, sample int) (int, error) {\n\tvar value int\n\tvar error error\n\tif total > sample {\n\t\tvalue = factorial(total) / factorial(total-sample)\n\t} else {\n\t\terror = errors.New(fmt.Sprintf(\"ERROR: supplied total > sample; permutations(total=%d, sample=%d)\", total, sample))\n\t}\n\treturn value, error\n}\n\nfunc main() {\n\tvar result, err = permutations(5, 2)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(result)\n}\n```\n\n```rs\nfn factorial(num: i64) -> i64 {\n    if num == 0 {\n        return 1;\n    } else {\n        return num * factorial(num - 1);\n    }\n}\n\nfn permutations(total: i64, sample: i64) -> i64 {\n    if total > sample {\n        return factorial(total) / factorial(total - sample);\n    } else {\n        panic!(\n            \"ERROR: supplied total > sample; permutations(total={}, sample={})\",\n            total, sample\n        )\n    }\n}\n\nfn main() -> () {\n    println!(\"{}\", permutations(5, 2))\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-02-23T07:25:43Z"}