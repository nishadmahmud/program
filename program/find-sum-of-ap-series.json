{"slug":"find-sum-of-ap-series","title":"Find sum of AP series","trackId":4360,"tags":["C++","Java","JavaScript","TypeScript","Python","GO"],"contributors":["harshraj8843","pelegsch666","vedantpople4","ShivamK2002","shashankgurunaga1","harsha-desaraju","RohithBoppey"],"contentHtml":"<h2>Write a program to find sum of ap series</h2>\n<p>An arithmetic progression (AP) is a sequence of numbers such that the difference of any two consecutive terms is a constant. The nth term of an AP is given by the formula an = a1 + (n-1)d where a1 is the first term and d is the common difference.</p>\n<pre><code>Input  : 2, 5, 3\nOutput : 20\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;iostream>\n#include &#x3C;math.h>\n#include &#x3C;vector>\n\nusing namespace std;\n\nint findArithmeticProgressionSum(vector&#x3C;int> v) {\n\n  int n = v.size();\n\n  if (n == 1) {\n    return v[0];\n  }\n\n  int a = v[0];\n  int d = v[1] - a;\n\n  int an = a + (n - 1) * d;\n\n  return n / 2 * (a + an);\n}\n\nint main() {\n\n  vector&#x3C;int> v = {-2, 4, 10, 16, 22};\n\n  cout &#x3C;&#x3C; findArithmeticProgressionSum(v);\n\n  return 0;\n}\n</code></pre>\n<pre><code>/*Author: Shashank Gurunaga  */\nimport java.util.*;\nimport java.lang.*;\n\npublic class findapseriessum {\n    public static int APsum(int a1, int n1, int d1) {\n        int sumofap = 0;\n        for (int i = 0; i &#x3C; n1; i++) {\n            sumofap += a1;\n            a1 += d1;\n        }\n        return sumofap;\n    }\n\n    public static void main(String[] Args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();// The number of terms in then AP series\n        int a = scanner.nextInt();// First term of the AP series\n        int d = scanner.nextInt(); // Common difference of the AP series\n        int res = APsum(a, n, d);\n        System.out.println(\"Sum of the AP Series: \" + res);\n    }\n\n}\n</code></pre>\n<pre><code>function sumOfApSeries(firstTerm, commmonDifference, nthTerm) {\n  const sumOfApSeries =\n    (nthTerm / 2) * (2 * firstTerm + (nthTerm - 1) * commmonDifference);\n  return sumOfApSeries;\n}\nconsole.log(sumOfApSeries(2, 3, 5));\n</code></pre>\n<pre><code>function sumOfApSeries(a: number, n: number, d: number): number {\n  const a_n = a + (n - 1) * d;\n  const part1 = n / 2;\n  const part2 = a + a_n;\n  return part1 * part2;\n}\n</code></pre>\n<pre><code># Program to find the sum of n-terms in an AP\n\n# The input to the program are a,n,d\n# a - first term\n# n - number of terms\n# d - common difference\n\na, n, d = list(map(int, input().split(\" \")))\n\nif n &#x3C; 0:\n    print(\"Error! Number of terms cannot be negative\")\nelse:\n    print((n / 2) * ((2 * a) + ((n - 1) * d)))\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar a int\n\tfmt.Scanf(\"%d\", &#x26;a)\n\tvar n int\n\tfmt.Scanf(\"%d\", &#x26;n)\n\tvar d int\n\tfmt.Scanf(\"%d\", &#x26;d)\n\tsum := (2*a + ((n - 1) * d)) * n\n\tfmt.Println(sum / 2)\n}\n</code></pre>\n","markdown":"\n## Write a program to find sum of ap series\n\nAn arithmetic progression (AP) is a sequence of numbers such that the difference of any two consecutive terms is a constant. The nth term of an AP is given by the formula a<sub>n</sub> = a<sub>1</sub> + (n-1)d where a<sub>1</sub> is the first term and d is the common difference.\n\n```txt\nInput  : 2, 5, 3\nOutput : 20\n```\n\n---\n\n<CodeBlock slug=\"find-sum-of-ap-series\" >\n\n```cpp\n#include <iostream>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\nint findArithmeticProgressionSum(vector<int> v) {\n\n  int n = v.size();\n\n  if (n == 1) {\n    return v[0];\n  }\n\n  int a = v[0];\n  int d = v[1] - a;\n\n  int an = a + (n - 1) * d;\n\n  return n / 2 * (a + an);\n}\n\nint main() {\n\n  vector<int> v = {-2, 4, 10, 16, 22};\n\n  cout << findArithmeticProgressionSum(v);\n\n  return 0;\n}\n```\n\n```java\n/*Author: Shashank Gurunaga  */\nimport java.util.*;\nimport java.lang.*;\n\npublic class findapseriessum {\n    public static int APsum(int a1, int n1, int d1) {\n        int sumofap = 0;\n        for (int i = 0; i < n1; i++) {\n            sumofap += a1;\n            a1 += d1;\n        }\n        return sumofap;\n    }\n\n    public static void main(String[] Args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();// The number of terms in then AP series\n        int a = scanner.nextInt();// First term of the AP series\n        int d = scanner.nextInt(); // Common difference of the AP series\n        int res = APsum(a, n, d);\n        System.out.println(\"Sum of the AP Series: \" + res);\n    }\n\n}\n```\n\n```js\nfunction sumOfApSeries(firstTerm, commmonDifference, nthTerm) {\n  const sumOfApSeries =\n    (nthTerm / 2) * (2 * firstTerm + (nthTerm - 1) * commmonDifference);\n  return sumOfApSeries;\n}\nconsole.log(sumOfApSeries(2, 3, 5));\n```\n\n```ts\nfunction sumOfApSeries(a: number, n: number, d: number): number {\n  const a_n = a + (n - 1) * d;\n  const part1 = n / 2;\n  const part2 = a + a_n;\n  return part1 * part2;\n}\n```\n\n```py\n# Program to find the sum of n-terms in an AP\n\n# The input to the program are a,n,d\n# a - first term\n# n - number of terms\n# d - common difference\n\na, n, d = list(map(int, input().split(\" \")))\n\nif n < 0:\n    print(\"Error! Number of terms cannot be negative\")\nelse:\n    print((n / 2) * ((2 * a) + ((n - 1) * d)))\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar a int\n\tfmt.Scanf(\"%d\", &a)\n\tvar n int\n\tfmt.Scanf(\"%d\", &n)\n\tvar d int\n\tfmt.Scanf(\"%d\", &d)\n\tsum := (2*a + ((n - 1) * d)) * n\n\tfmt.Println(sum / 2)\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-02-23T07:25:43Z"}