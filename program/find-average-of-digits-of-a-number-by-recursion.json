{"slug":"find-average-of-digits-of-a-number-by-recursion","title":"Find average of digits of a number by recursion","trackId":5360,"tags":["C","C++","C#","JavaScript","Kotlin","Ruby","TypeScript","Python","Haskell","PHP","Rust"],"contributors":["roshan798","harshraj8843","bnzone","anandfresh","Fukurokudzu","leslieyip02","Coder-12-ux","yashasvini121","Avicenne-b","hi-Kartik2004","urielwix"],"contentHtml":"<h2>Write a program to find average of digits of a number by recursion</h2>\n<p>Average of digits of a number is the sum of digits of the number divided by the number of digits in the number. For example, the average of digits of 123 is 6. The sum of digits of 123 is 6 and the number of digits in 123 is 3. So, the average of digits of 123 is 6/3 = 2.</p>\n<pre><code>Input  : 123\nOutput : 2\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint sumOfDigits(int n) {\n  if (n == 0) return 0;\n  return (n % 10) + sumOfDigits(n / 10);\n}\n\nvoid main() {\n  int n;\n  printf(\"Enter a number: \");\n  scanf(\"%d\",&#x26;n);\n  \n  int sum = sumOfDigits(n);\n  int digit_count = 0;\n  \n  while (n > 0) {\n    digit_count++;\n    n /= 10;\n  }\n  double average = (double)sum/digit_count;\n  printf(\"Average of digits: %lf\\n\",average);\n\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\nusing namespace std;\nint sumOfDigits(int n) {\n  if (n == 0) {\n    return 0;\n  }\n  return (n % 10) + sumOfDigits(n / 10);\n}\n\nint main() {\n  int n;\n  cout &#x3C;&#x3C; \"Enter a number: \";\n  cin >> n;\n  int sum = sumOfDigits(n);\n  int digit_count = 0;\n  while (n > 0) {\n    digit_count++;\n    n /= 10;\n  }\n  cout &#x3C;&#x3C; \"Average of digits: \" &#x3C;&#x3C; (double)sum/digit_count &#x3C;&#x3C; endl;\n  return 0;\n}\n</code></pre>\n<pre><code>using System;\n \nclass AVERAGE {\n\n    static double avgRec(int[] a, int i)\n    {\n        int n = a.Length;\n        if (i == n-1)\n            return a[i];\n     \n        if (i == 0)\n            return ((a[i] + avgRec(a, i+1))/n);\n     \n        return (a[i] + avgRec(a, i+1));\n    }\n     \n \n    public static void Main ()\n    {   \n       int []arr = {1,2,3}; \n       Console.Write(avgRec(arr, 0));\n    }\n}\n</code></pre>\n<pre><code>var averageOfDigits = function (num, digitsCount, digitsSum) {\n    if (digitsCount === void 0) { digitsCount = 0; }\n    if (digitsSum === void 0) { digitsSum = 0; }\n    if (num &#x3C; 10) {\n        digitsCount++;\n        digitsSum += num;\n        return digitsSum / digitsCount;\n    }\n    else {\n        var digit = num % 10;\n        digitsCount++;\n        digitsSum += digit;\n        num = Math.floor(num / 10);\n        return averageOfDigits(num, digitsCount, digitsSum);\n    }\n};\nconsole.log(averageOfDigits(455));\n</code></pre>\n<pre><code>import java.util.Scanner\n\nfun averageOfDigits(n: Int, sum: Float = 0.0f, digits: Float = 0.0f) : Float {\n    if (n == 0) return sum / digits;\n\n    var s = sum\n    var d = digits\n\n    s += n % 10\n    d += 1\n\n    return averageOfDigits(n / 10, s, d)\n}\n\n\nfun main() {\n    val reader = Scanner(System.`in`)\n    val number: Int = reader.nextInt() // taking input from Scanner Class\n    reader.close() // Closing the Scanner\n    println(averageOfDigits(number))\n}\n</code></pre>\n<pre><code>module Average\n\n  def self.get_avg(number, digits: [])\n    return digits.sum / digits.length if number &#x3C;= 0\n    digits &#x3C;&#x3C; (number % 10)\n    get_avg(number / 10, digits: digits)\n  end\n  \nend\n\nputs Average.get_avg(123) # => 2\nputs Average.get_avg(448) # => 5\n</code></pre>\n<pre><code>var averageOfDigits = function (num : number, digitsCount: number, digitsSum: number) {\n    if (digitsCount === void 0) { digitsCount = 0; }\n    if (digitsSum === void 0) { digitsSum = 0; }\n    if (num &#x3C; 10) {\n        digitsCount++;\n        digitsSum += num;\n        return (digitsSum / digitsCount);\n    }\n    else {\n        var digit: number = num % 10;\n        digitsCount++;\n        digitsSum += digit;\n        num = Math.floor(num / 10);\n        return averageOfDigits(num, digitsCount, digitsSum);\n    }\n};\nconsole.log(averageOfDigits(123));\n</code></pre>\n<pre><code>def average_of_digits(n):\n    if n == 0:\n        return 0\n    digits = [int(d) for d in str(n)]\n    return sum(digits) / len(digits)\n\n\nprint(average_of_digits(123))\n</code></pre>\n<pre><code>f :: Integer -> [Integer]\nf 0 = []\nf x = (x `mod` 10) : f (x `div` 10)\n\nmain :: IO()\nmain =  do\n    let n = 123\n    let d = f n\n    let a = (fromIntegral $ foldl (+) 0 d) / fromIntegral (length d)\n    \n    print a\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction averageRecursion($a, $i=0)\n{\n    if(!is_array($a)) $a = str_split($a);\n    \n    $n = sizeof($a);\n    \n    if ($i == $n - 1) return $a[$i];\n\n    if ($i == 0) return (($a[$i] + averageRecursion($a, $i + 1)) / $n);\n \n    return ($a[$i] + averageRecursion($a, $i + 1));\n}\n\n$num = 123;\necho averageRecursion($num);\n \n \n?>\n</code></pre>\n<pre><code>fn avg_of_digits(n: u32) -> f32 {\n    let (sum, count) = sum_and_count_of_digits(n);\n    sum as f32 / count as f32\n}\n\nfn sum_and_count_of_digits(n: u32) -> (u32, u32) {\n    if n == 0 {\n        (0, 0)\n    } else {\n        let (sum, count) = sum_and_count_of_digits(n / 10);\n        (sum + n % 10, count + 1)\n    }\n}\n</code></pre>\n","markdown":"\n## Write a program to find average of digits of a number by recursion\n\nAverage of digits of a number is the sum of digits of the number divided by the number of digits in the number. For example, the average of digits of 123 is 6. The sum of digits of 123 is 6 and the number of digits in 123 is 3. So, the average of digits of 123 is 6/3 = 2.\n\n```txt\nInput  : 123\nOutput : 2\n```\n\n---\n\n<CodeBlock slug=\"find-average-of-digits-of-a-number-by-recursion\" >\n\n```c\n#include <stdio.h>\n\nint sumOfDigits(int n) {\n  if (n == 0) return 0;\n  return (n % 10) + sumOfDigits(n / 10);\n}\n\nvoid main() {\n  int n;\n  printf(\"Enter a number: \");\n  scanf(\"%d\",&n);\n  \n  int sum = sumOfDigits(n);\n  int digit_count = 0;\n  \n  while (n > 0) {\n    digit_count++;\n    n /= 10;\n  }\n  double average = (double)sum/digit_count;\n  printf(\"Average of digits: %lf\\n\",average);\n\n}\n```\n\n```cpp\n#include <iostream>\nusing namespace std;\nint sumOfDigits(int n) {\n  if (n == 0) {\n    return 0;\n  }\n  return (n % 10) + sumOfDigits(n / 10);\n}\n\nint main() {\n  int n;\n  cout << \"Enter a number: \";\n  cin >> n;\n  int sum = sumOfDigits(n);\n  int digit_count = 0;\n  while (n > 0) {\n    digit_count++;\n    n /= 10;\n  }\n  cout << \"Average of digits: \" << (double)sum/digit_count << endl;\n  return 0;\n}\n```\n\n```cs\nusing System;\n \nclass AVERAGE {\n\n    static double avgRec(int[] a, int i)\n    {\n        int n = a.Length;\n        if (i == n-1)\n            return a[i];\n     \n        if (i == 0)\n            return ((a[i] + avgRec(a, i+1))/n);\n     \n        return (a[i] + avgRec(a, i+1));\n    }\n     \n \n    public static void Main ()\n    {   \n       int []arr = {1,2,3}; \n       Console.Write(avgRec(arr, 0));\n    }\n}\n```\n\n```js\nvar averageOfDigits = function (num, digitsCount, digitsSum) {\n    if (digitsCount === void 0) { digitsCount = 0; }\n    if (digitsSum === void 0) { digitsSum = 0; }\n    if (num < 10) {\n        digitsCount++;\n        digitsSum += num;\n        return digitsSum / digitsCount;\n    }\n    else {\n        var digit = num % 10;\n        digitsCount++;\n        digitsSum += digit;\n        num = Math.floor(num / 10);\n        return averageOfDigits(num, digitsCount, digitsSum);\n    }\n};\nconsole.log(averageOfDigits(455));\n```\n\n```kt\nimport java.util.Scanner\n\nfun averageOfDigits(n: Int, sum: Float = 0.0f, digits: Float = 0.0f) : Float {\n    if (n == 0) return sum / digits;\n\n    var s = sum\n    var d = digits\n\n    s += n % 10\n    d += 1\n\n    return averageOfDigits(n / 10, s, d)\n}\n\n\nfun main() {\n    val reader = Scanner(System.`in`)\n    val number: Int = reader.nextInt() // taking input from Scanner Class\n    reader.close() // Closing the Scanner\n    println(averageOfDigits(number))\n}\n```\n\n```rb\nmodule Average\n\n  def self.get_avg(number, digits: [])\n    return digits.sum / digits.length if number <= 0\n    digits << (number % 10)\n    get_avg(number / 10, digits: digits)\n  end\n  \nend\n\nputs Average.get_avg(123) # => 2\nputs Average.get_avg(448) # => 5\n```\n\n```ts\nvar averageOfDigits = function (num : number, digitsCount: number, digitsSum: number) {\n    if (digitsCount === void 0) { digitsCount = 0; }\n    if (digitsSum === void 0) { digitsSum = 0; }\n    if (num < 10) {\n        digitsCount++;\n        digitsSum += num;\n        return (digitsSum / digitsCount);\n    }\n    else {\n        var digit: number = num % 10;\n        digitsCount++;\n        digitsSum += digit;\n        num = Math.floor(num / 10);\n        return averageOfDigits(num, digitsCount, digitsSum);\n    }\n};\nconsole.log(averageOfDigits(123));\n```\n\n```py\ndef average_of_digits(n):\n    if n == 0:\n        return 0\n    digits = [int(d) for d in str(n)]\n    return sum(digits) / len(digits)\n\n\nprint(average_of_digits(123))\n```\n\n```hs\nf :: Integer -> [Integer]\nf 0 = []\nf x = (x `mod` 10) : f (x `div` 10)\n\nmain :: IO()\nmain =  do\n    let n = 123\n    let d = f n\n    let a = (fromIntegral $ foldl (+) 0 d) / fromIntegral (length d)\n    \n    print a\n```\n\n```php\n<?php\n\nfunction averageRecursion($a, $i=0)\n{\n    if(!is_array($a)) $a = str_split($a);\n    \n    $n = sizeof($a);\n    \n    if ($i == $n - 1) return $a[$i];\n\n    if ($i == 0) return (($a[$i] + averageRecursion($a, $i + 1)) / $n);\n \n    return ($a[$i] + averageRecursion($a, $i + 1));\n}\n\n$num = 123;\necho averageRecursion($num);\n \n \n?>\n```\n\n```rs\nfn avg_of_digits(n: u32) -> f32 {\n    let (sum, count) = sum_and_count_of_digits(n);\n    sum as f32 / count as f32\n}\n\nfn sum_and_count_of_digits(n: u32) -> (u32, u32) {\n    if n == 0 {\n        (0, 0)\n    } else {\n        let (sum, count) = sum_and_count_of_digits(n / 10);\n        (sum + n % 10, count + 1)\n    }\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-09T17:14:17Z"}