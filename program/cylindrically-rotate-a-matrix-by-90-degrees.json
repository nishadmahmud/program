{"slug":"cylindrically-rotate-a-matrix-by-90-degrees","title":"Cylindrically rotate a matrix by 90 degrees","trackId":5444,"tags":["C","C++","C#","Java","JavaScript","Ruby","TypeScript","Python","PHP","Rust"],"contributors":["mayankbhatt07141","anandfresh","harshraj8843","leslieyip02","SarahTek"],"contentHtml":"<h2>Write a program to cylindrically rotate a matrix by 90 degrees</h2>\n<pre><code>Input  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n7 4 1\n8 5 2\n9 6 3\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nvoid swap(int *x, int *y){\n    int temp = *x;\n    *x = *y;\n    *y= temp;\n}\nint main(){\n\n   int n=3;\n   int mat[3][3]= { { 1, 2, 3 },{ 4, 5, 6},{ 7, 8, 9 } };\n\n   for(int i=0; i&#x3C;n; i++){\n     for(int j=i+1; j&#x3C;n; j++)\n         swap(&#x26;mat[i][j], &#x26;mat[j][i]);\n    }\n\n   for(int i=0; i&#x3C;n; i++){\n     for(int j=0; j&#x3C;n/2; j++){\n        swap(&#x26;mat[i][j], &#x26;mat[i][n-j-1]);\n     }\n   }\n\n   printf(\"Rotated Matrix :\\n\");\n   for(int i=0; i&#x3C;n; i++){\n     for(int j=0; j&#x3C;n; j++){\n       printf(\"%d \",mat[i][j]);\n     }\n     printf(\"\\n\");\n   }\n}\n</code></pre>\n<pre><code>#include &#x3C;bits/stdc++.h>\nusing namespace std;\n \n#define N 3\n\nvoid rotate90Clockwise(int arr[N][N])\n{\n    for (int j = 0; j &#x3C; N; j++)\n    {\n        for (int i = N - 1; i >= 0; i--)\n            cout &#x3C;&#x3C; arr[i][j] &#x3C;&#x3C; \" \";\n        cout &#x3C;&#x3C; '\\n';\n    }\n}\n\nint main()\n{\n    int arr[N][N] = { { 1, 2, 3 },\n                      { 4, 5, 6 },\n                      { 7, 8, 9 }};\n    rotate90Clockwise(arr);\n    return 0;\n}\n</code></pre>\n<pre><code>using System;\n \nclass MATRIX\n{\nstatic int N = 3;\n \nstatic void rotate90Degrees(int[,] a)\n{\n \n    for (int i = 0; i &#x3C; N / 2; i++)\n    {\n        for (int j = i; j &#x3C; N - i - 1; j++)\n        {\n\n            int temp = a[i, j];\n            a[i, j] = a[N - 1 - j, i];\n            a[N - 1 - j, i] = a[N - 1 - i, N - 1 - j];\n            a[N - 1 - i, N - 1 - j] = a[j, N - 1 - i];\n            a[j, N - 1 - i] = temp;\n        }\n    }\n}\n \n\nstatic void printMatrix(int[,] arr)\n{\n    for (int i = 0; i &#x3C; N; i++)\n    {\n        for (int j = 0; j &#x3C; N; j++)\n        Console.Write( arr[i, j] + \" \");\n        Console.Write(\"\\n\");\n    }\n}\n \n\npublic static void Main ()\n    {\n    int [,]arr = {{1, 2, 3 },\n                  {4, 5, 6 },\n                  {7, 8, 9 }};\n    rotate90Degrees(arr);\n    printMatrix(arr);\n}\n}\n</code></pre>\n<pre><code>import java.io.*;\n \nclass Matrix {\n    static int N = 3;\n\n    static void rotate90Degrees(int arr[][])\n    {\n        for (int j = 0; j &#x3C; N; j++)\n        {\n            for (int i = N - 1; i >= 0; i--)\n                System.out.print(arr[i][j] + \" \");\n                System.out.print(\"\\n\");\n        }\n    }\n    public static void main(String[] args)\n    {\n        int arr[][] = { { 1, 2, 3 },\n                        { 4, 5, 6 },\n                        { 7, 8, 9 }} ;\n        rotate90Degrees(arr);\n    }\n}\n</code></pre>\n<pre><code>\"use strict\";\n\nlet N = 3;\n\nfunction rotate90Clockwise(arr) {\n  for (let j = 0; j &#x3C; N; j++) {\n    for (let i = N - 1; i >= 0; i--) {\n      process.stdout.write(arr[i][j] + \" \");\n    }\n    console.log();\n  }\n}\n\nlet arr = [\n  [1, 1, 1],\n  [2, 2, 2],\n  [3, 3, 3],\n];\n\nconsole.log(\"Initial matrix:\");\nfor (let i = 0; i &#x3C; N; i++) {\n  for (let j = 0; j &#x3C; N; j++) {\n    process.stdout.write(arr[i][j] + \" \");\n  }\n  console.log();\n}\n\nconsole.log(\"\\nRotated matrix:\");\nrotate90Clockwise(arr);\n</code></pre>\n<pre><code>matrix = [ [1 ,2, 3], [4, 5, 6], [7, 8, 9] ]\nn = 3\ntemp_matrix = Array.new(n){Array.new(n)}\nfor i in 0...n\n  for j in 0...n\n    temp_matrix[j][n-i-1] = matrix[i][j]\n  end\nend\n\nputs temp_matrix.inspect\n</code></pre>\n<pre><code>const rotateClockwise = (matrix: number[][]): number[][] => {\n\n    let n = matrix.length;\n    for (let i = 0; i &#x3C; n / 2; i++) {\n        for (let j = i; j &#x3C; n - i - 1; j++) {\n            let tmp = matrix[i][j];\n            matrix[i][j] = matrix[n - j - 1][i];\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n            matrix[j][n - i - 1] = tmp;\n        }\n    }\n    return matrix;\n};\n\nconsole.log(rotateClockwise([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));\n</code></pre>\n<pre><code>N = 3\n\n\ndef rotate90Degrees(arr):\n    global N\n\n    for j in range(N):\n        for i in range(N - 1, -1, -1):\n            print(arr[i][j], end=\" \")\n        print()\n\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrotate90Degrees(arr)\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction rotate90Degrees($array)\n{\n    $result = array();\n    foreach (array_values($array) as $key => $sub_array)\n    {\n        foreach (array_values($sub_array) as $sub_key => $value)\n        {\n            if (empty($result[$sub_key]))\n            {\n                $result[$sub_key] = array($value);\n            }\n            else\n            {\n                array_unshift($result[$sub_key], $value);\n            }\n        }\n    }\n    return $result;\n}\n\n$array = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n\nprint_r(rotate90Degrees($array));\n\n?>\n</code></pre>\n<pre><code>fn rotate_matrix(matrix: Vec::&#x3C;Vec&#x3C;u32>>) -> Vec::&#x3C;Vec&#x3C;u32>> {\n    let mut rotated: Vec::&#x3C;Vec&#x3C;u32>> = Vec::new();\n\n    for i in 0 .. matrix.len() {\n        let mut row: Vec::&#x3C;u32> = Vec::new();\n        for j in (0 .. matrix.len()).rev() {\n            row.push(matrix[j][i]);\n        }\n        rotated.push(row);\n    }\n\n    rotated\n}\n\nfn main() {\n    let matrix: Vec::&#x3C;Vec&#x3C;u32>> = vec![\n        vec![1, 2, 3],\n        vec![4, 5, 6],\n        vec![7, 8, 9]\n    ];\n\n    let matrix = rotate_matrix(matrix);\n\n    for row in matrix {\n        row.iter().for_each(|i| print!(\"{} \", i));\n        println!(\"\");\n    }\n}\n</code></pre>\n","markdown":"\n## Write a program to cylindrically rotate a matrix by 90 degrees\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n7 4 1\n8 5 2\n9 6 3\n```\n\n---\n\n<CodeBlock slug=\"cylindrically-rotate-a-matrix-by-90-degrees\" >\n\n```c\n#include <stdio.h>\n\nvoid swap(int *x, int *y){\n    int temp = *x;\n    *x = *y;\n    *y= temp;\n}\nint main(){\n\n   int n=3;\n   int mat[3][3]= { { 1, 2, 3 },{ 4, 5, 6},{ 7, 8, 9 } };\n\n   for(int i=0; i<n; i++){\n     for(int j=i+1; j<n; j++)\n         swap(&mat[i][j], &mat[j][i]);\n    }\n\n   for(int i=0; i<n; i++){\n     for(int j=0; j<n/2; j++){\n        swap(&mat[i][j], &mat[i][n-j-1]);\n     }\n   }\n\n   printf(\"Rotated Matrix :\\n\");\n   for(int i=0; i<n; i++){\n     for(int j=0; j<n; j++){\n       printf(\"%d \",mat[i][j]);\n     }\n     printf(\"\\n\");\n   }\n}\n```\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \n#define N 3\n\nvoid rotate90Clockwise(int arr[N][N])\n{\n    for (int j = 0; j < N; j++)\n    {\n        for (int i = N - 1; i >= 0; i--)\n            cout << arr[i][j] << \" \";\n        cout << '\\n';\n    }\n}\n\nint main()\n{\n    int arr[N][N] = { { 1, 2, 3 },\n                      { 4, 5, 6 },\n                      { 7, 8, 9 }};\n    rotate90Clockwise(arr);\n    return 0;\n}\n```\n\n```cs\nusing System;\n \nclass MATRIX\n{\nstatic int N = 3;\n \nstatic void rotate90Degrees(int[,] a)\n{\n \n    for (int i = 0; i < N / 2; i++)\n    {\n        for (int j = i; j < N - i - 1; j++)\n        {\n\n            int temp = a[i, j];\n            a[i, j] = a[N - 1 - j, i];\n            a[N - 1 - j, i] = a[N - 1 - i, N - 1 - j];\n            a[N - 1 - i, N - 1 - j] = a[j, N - 1 - i];\n            a[j, N - 1 - i] = temp;\n        }\n    }\n}\n \n\nstatic void printMatrix(int[,] arr)\n{\n    for (int i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        Console.Write( arr[i, j] + \" \");\n        Console.Write(\"\\n\");\n    }\n}\n \n\npublic static void Main ()\n    {\n    int [,]arr = {{1, 2, 3 },\n                  {4, 5, 6 },\n                  {7, 8, 9 }};\n    rotate90Degrees(arr);\n    printMatrix(arr);\n}\n}\n```\n\n```java\nimport java.io.*;\n \nclass Matrix {\n    static int N = 3;\n\n    static void rotate90Degrees(int arr[][])\n    {\n        for (int j = 0; j < N; j++)\n        {\n            for (int i = N - 1; i >= 0; i--)\n                System.out.print(arr[i][j] + \" \");\n                System.out.print(\"\\n\");\n        }\n    }\n    public static void main(String[] args)\n    {\n        int arr[][] = { { 1, 2, 3 },\n                        { 4, 5, 6 },\n                        { 7, 8, 9 }} ;\n        rotate90Degrees(arr);\n    }\n}\n```\n\n```js\n\"use strict\";\n\nlet N = 3;\n\nfunction rotate90Clockwise(arr) {\n  for (let j = 0; j < N; j++) {\n    for (let i = N - 1; i >= 0; i--) {\n      process.stdout.write(arr[i][j] + \" \");\n    }\n    console.log();\n  }\n}\n\nlet arr = [\n  [1, 1, 1],\n  [2, 2, 2],\n  [3, 3, 3],\n];\n\nconsole.log(\"Initial matrix:\");\nfor (let i = 0; i < N; i++) {\n  for (let j = 0; j < N; j++) {\n    process.stdout.write(arr[i][j] + \" \");\n  }\n  console.log();\n}\n\nconsole.log(\"\\nRotated matrix:\");\nrotate90Clockwise(arr);\n```\n\n```rb\nmatrix = [ [1 ,2, 3], [4, 5, 6], [7, 8, 9] ]\nn = 3\ntemp_matrix = Array.new(n){Array.new(n)}\nfor i in 0...n\n  for j in 0...n\n    temp_matrix[j][n-i-1] = matrix[i][j]\n  end\nend\n\nputs temp_matrix.inspect\n```\n\n```ts\nconst rotateClockwise = (matrix: number[][]): number[][] => {\n\n    let n = matrix.length;\n    for (let i = 0; i < n / 2; i++) {\n        for (let j = i; j < n - i - 1; j++) {\n            let tmp = matrix[i][j];\n            matrix[i][j] = matrix[n - j - 1][i];\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n            matrix[j][n - i - 1] = tmp;\n        }\n    }\n    return matrix;\n};\n\nconsole.log(rotateClockwise([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));\n```\n\n```py\nN = 3\n\n\ndef rotate90Degrees(arr):\n    global N\n\n    for j in range(N):\n        for i in range(N - 1, -1, -1):\n            print(arr[i][j], end=\" \")\n        print()\n\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrotate90Degrees(arr)\n```\n\n```php\n<?php\n\nfunction rotate90Degrees($array)\n{\n    $result = array();\n    foreach (array_values($array) as $key => $sub_array)\n    {\n        foreach (array_values($sub_array) as $sub_key => $value)\n        {\n            if (empty($result[$sub_key]))\n            {\n                $result[$sub_key] = array($value);\n            }\n            else\n            {\n                array_unshift($result[$sub_key], $value);\n            }\n        }\n    }\n    return $result;\n}\n\n$array = array(\n    array(1, 2, 3),\n    array(4, 5, 6),\n    array(7, 8, 9)\n);\n\n\nprint_r(rotate90Degrees($array));\n\n?>\n```\n\n```rs\nfn rotate_matrix(matrix: Vec::<Vec<u32>>) -> Vec::<Vec<u32>> {\n    let mut rotated: Vec::<Vec<u32>> = Vec::new();\n\n    for i in 0 .. matrix.len() {\n        let mut row: Vec::<u32> = Vec::new();\n        for j in (0 .. matrix.len()).rev() {\n            row.push(matrix[j][i]);\n        }\n        rotated.push(row);\n    }\n\n    rotated\n}\n\nfn main() {\n    let matrix: Vec::<Vec<u32>> = vec![\n        vec![1, 2, 3],\n        vec![4, 5, 6],\n        vec![7, 8, 9]\n    ];\n\n    let matrix = rotate_matrix(matrix);\n\n    for row in matrix {\n        row.iter().for_each(|i| print!(\"{} \", i));\n        println!(\"\");\n    }\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-09T08:09:40Z"}