{"slug":"find-the-determinant-of-a-matrix","title":"Find the determinant of a matrix","trackId":3422,"tags":["C","Java","JavaScript","Ruby","Swift","TypeScript","Python","GO","GO"],"contributors":["harshraj8843","vedantpople4","Sri01729","urlunaticguy","jaypavasiya"],"contentHtml":"<h2>Write a program to find the determinant of a matrix</h2>\n<p>The determinant of a square matrix is a scalar value that can be computed from the elements of the matrix. The determinant of a matrix A is denoted as det(A) or |A|.</p>\n<pre><code>Input  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n0\n</code></pre>\n<hr>\n<pre><code>#include&#x3C;stdio.h>\n#include&#x3C;math.h>\n#include&#x3C;stdlib.h>\n\n#define   SIZE   10\n\nint main()\n{\n\t float a[SIZE][SIZE], x[SIZE], ratio, det=1;\n\t int i,j,k,n;\n\n\t printf(\"Enter Order of Matrix: \");\n\t scanf(\"%d\", &#x26;n);\n\n\t /* 2. Reading Matrix */\n\t printf(\"\\nEnter Coefficients of Matrix: \\n\");\n\t for(i=0;i&#x3C; n;i++)\n\t {\n\t\t  for(j=0;j&#x3C; n;j++)\n\t\t  {\n\t\t\t   printf(\"a[%d][%d]=\",i,j);\n\t\t\t   scanf(\"%f\", &#x26;a[i][j]);\n\t\t  }\n\t }\n\n\t for(i=0;i&#x3C; n;i++)\n\t {\n\t\t  if(a[i][i] == 0.0)\n\t\t  {\n\t\t\t   printf(\"Mathematical Error!\");\n\t\t\t   exit(0);\n\t\t  }\n\t\t  for(j=i+1;j&#x3C; n;j++)\n\t\t  {\n\t\t\t   ratio = a[j][i]/a[i][i];\n\n\t\t\t   for(k=0;k&#x3C; n;k++)\n\t\t\t   {\n\t\t\t  \t\ta[j][k] = a[j][k] - ratio*a[i][k];\n\t\t\t   }\n\t\t  }\n\t }\n\t printf(\"\\nUpper Triangular Matrix: \\n\");\n\t for(i=0;i&#x3C; n;i++)\n\t {\n\t\t  for(j=0;j&#x3C; n;j++)\n\t\t  {\n\t\t\t   printf(\"%0.2f\\t\",a[i][j]);\n\t\t  }\n\t\t  printf(\"\\n\");\n\t }\n\n\n\t for(i=0;i&#x3C; n;i++)\n     {\n         det = det * a[i][i];\n     }\n\n\t printf(\"\\n\\nDeterminant of given matrix is: %0.3f\", det);\n\n\n\t return 0;\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class FindTheDeterminantOfAMatrix {\n    public static void main(String[] args) {\n\n        Scanner scnr = new Scanner(System.in);\n        int i, j;\n        int determinant = 0;\n        int arr[][] = new int[3][3];\n        System.out.println(\"Enter the input values\");\n        for (i = 0; i &#x3C; 3; i++) {\n            for (j = 0; j &#x3C; 3; j++) {\n                arr[i][j] = scnr.nextInt();\n            }\n        }\n\n        determinant = arr[0][0]*(arr[1][1]*arr[2][2] - arr[2][1]*arr[1][2]) -  (arr[0][1]*(arr[1][0]*arr[2][2] - arr[1][2]*arr[2][0])) +  (arr[0][2]*(arr[1][0]*arr[2][1] - arr[2][0]*arr[1][1]));\n\n        System.out.println(determinant);\n    }\n}\n</code></pre>\n<pre><code>const determinant = m => \n  m.length == 1 ?\n  m[0][0] :\n  m.length == 2 ? \n  m[0][0]*m[1][1]-m[0][1]*m[1][0] :\n  m[0].reduce((r,e,i) => \n    r+(-1)**(i+2)*e*determinant(m.slice(1).map(c => \n      c.filter((_,j) => i != j))),0)\n\nconst test = [[1,2,3],[4,5,6],[7,8,9]] // 0\n\nconsole.log(determinant(test))\n</code></pre>\n<pre><code># frozen_string_literal: true\n\nrequire 'matrix'\n\ndef determinant(matrix)\n  matrix.determinant\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Dimension : '\n  dimension = gets.chomp.to_i\n  input_matrix = []\n  puts 'Input     :'\n  dimension.times do\n    input_matrix &#x3C;&#x3C; gets.chomp.split.map(&#x26;:to_i)\n  end\n  begin\n    matrix = Matrix[*input_matrix]\n    puts \"Output    :\\n#{determinant(matrix)}\"\n  rescue ExceptionForMatrix::ErrDimensionMismatch => e\n    puts \"Error     : #{e.message}\"\n  end\nend\n</code></pre>\n<pre><code>import Foundation\n\nvar matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nvar determinant = 0, counterForSign = 0\n\nfor index in 0..&#x3C;3 {\n    var part1 = matrix[1]\n    var part2 = matrix[2]\n    part1.remove(at: index)\n    part2.remove(at: index)\n    let adj = (part1[0] * part2[1]) - (part1[1] * part2[0])\n    if (counterForSign == 0) {\n        determinant += matrix[0][index] * adj\n        counterForSign += 1\n    } else {\n        determinant -= matrix[0][index] * adj\n        counterForSign -= 1\n    }\n}\n\nprint(determinant)\n</code></pre>\n<pre><code>const determinant = (m: any[])=> \n  m.length == 1 ?\n  m[0][0] :\n  m.length == 2 ? \n  m[0][0]*m[1][1]-m[0][1]*m[1][0] :\n  m[0].reduce((r: number,e: number,i: number) => \n    r+(-1)**(i+2)*e*determinant(m.slice(1).map((c: any[]) => \n      c.filter((_,j) => i != j))),0)\n\nconst test = [[1,2,3],[4,5,6],[7,8,9]] // 0\n\nconsole.log(determinant(test))\n</code></pre>\n<pre><code>from array import ArrayType\n\nimport numpy as np\n\n\ndef create_line(i: int) -> ArrayType:\n    line_i = input(f\"Line {i}: \").split()\n    return np.array(line_i, dtype=float)\n\n\nn = int(input(\"Matrix Dimension: \"))\nmatrix = [create_line(i) for i in range(n)]\n\nprint(np.linalg.det(matrix))\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i, j int\n\tvar det [3][3]int\n\tfor i = 0; i &#x3C; 3; i++ {\n\t\tfor j = 0; j &#x3C; 3; j++ {\n\t\t\tfmt.Scan(&#x26;det[i][j])\n\t\t}\n\t}\n\tx := (det[1][1] * det[2][2]) - (det[2][1] * det[1][2])\n\ty := (det[1][0] * det[2][2]) - (det[2][0] * det[1][2])\n\tz := (det[1][0] * det[2][1]) - (det[2][0] * det[1][1])\n\tans := (det[0][0] * x) - (det[0][1] * y) + (det[0][2] * z)\n\tfmt.Println(ans)\n}\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i, j int\n\tvar det [3][3]int\n\tfor i = 0; i &#x3C; 3; i++ {\n\t\tfor j = 0; j &#x3C; 3; j++ {\n\t\t\tfmt.Scan(&#x26;det[i][j])\n\t\t}\n\t}\n\tx := (det[1][1] * det[2][2]) - (det[2][1] * det[1][2])\n\ty := (det[1][0] * det[2][2]) - (det[2][0] * det[1][2])\n\tz := (det[1][0] * det[2][1]) - (det[2][0] * det[1][1])\n\tans := (det[0][0] * x) - (det[0][1] * y) + (det[0][2] * z)\n\tfmt.Println(ans)\n}\n</code></pre>\n","markdown":"\n## Write a program to find the determinant of a matrix\n\nThe determinant of a square matrix is a scalar value that can be computed from the elements of the matrix. The determinant of a matrix A is denoted as det(A) or |A|.\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n0\n```\n\n---\n\n<CodeBlock slug=\"find-the-determinant-of-a-matrix\" >\n\n```c\n#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n\n#define   SIZE   10\n\nint main()\n{\n\t float a[SIZE][SIZE], x[SIZE], ratio, det=1;\n\t int i,j,k,n;\n\n\t printf(\"Enter Order of Matrix: \");\n\t scanf(\"%d\", &n);\n\n\t /* 2. Reading Matrix */\n\t printf(\"\\nEnter Coefficients of Matrix: \\n\");\n\t for(i=0;i< n;i++)\n\t {\n\t\t  for(j=0;j< n;j++)\n\t\t  {\n\t\t\t   printf(\"a[%d][%d]=\",i,j);\n\t\t\t   scanf(\"%f\", &a[i][j]);\n\t\t  }\n\t }\n\n\t for(i=0;i< n;i++)\n\t {\n\t\t  if(a[i][i] == 0.0)\n\t\t  {\n\t\t\t   printf(\"Mathematical Error!\");\n\t\t\t   exit(0);\n\t\t  }\n\t\t  for(j=i+1;j< n;j++)\n\t\t  {\n\t\t\t   ratio = a[j][i]/a[i][i];\n\n\t\t\t   for(k=0;k< n;k++)\n\t\t\t   {\n\t\t\t  \t\ta[j][k] = a[j][k] - ratio*a[i][k];\n\t\t\t   }\n\t\t  }\n\t }\n\t printf(\"\\nUpper Triangular Matrix: \\n\");\n\t for(i=0;i< n;i++)\n\t {\n\t\t  for(j=0;j< n;j++)\n\t\t  {\n\t\t\t   printf(\"%0.2f\\t\",a[i][j]);\n\t\t  }\n\t\t  printf(\"\\n\");\n\t }\n\n\n\t for(i=0;i< n;i++)\n     {\n         det = det * a[i][i];\n     }\n\n\t printf(\"\\n\\nDeterminant of given matrix is: %0.3f\", det);\n\n\n\t return 0;\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class FindTheDeterminantOfAMatrix {\n    public static void main(String[] args) {\n\n        Scanner scnr = new Scanner(System.in);\n        int i, j;\n        int determinant = 0;\n        int arr[][] = new int[3][3];\n        System.out.println(\"Enter the input values\");\n        for (i = 0; i < 3; i++) {\n            for (j = 0; j < 3; j++) {\n                arr[i][j] = scnr.nextInt();\n            }\n        }\n\n        determinant = arr[0][0]*(arr[1][1]*arr[2][2] - arr[2][1]*arr[1][2]) -  (arr[0][1]*(arr[1][0]*arr[2][2] - arr[1][2]*arr[2][0])) +  (arr[0][2]*(arr[1][0]*arr[2][1] - arr[2][0]*arr[1][1]));\n\n        System.out.println(determinant);\n    }\n}\n```\n\n```js\nconst determinant = m => \n  m.length == 1 ?\n  m[0][0] :\n  m.length == 2 ? \n  m[0][0]*m[1][1]-m[0][1]*m[1][0] :\n  m[0].reduce((r,e,i) => \n    r+(-1)**(i+2)*e*determinant(m.slice(1).map(c => \n      c.filter((_,j) => i != j))),0)\n\nconst test = [[1,2,3],[4,5,6],[7,8,9]] // 0\n\nconsole.log(determinant(test))\n```\n\n```rb\n# frozen_string_literal: true\n\nrequire 'matrix'\n\ndef determinant(matrix)\n  matrix.determinant\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Dimension : '\n  dimension = gets.chomp.to_i\n  input_matrix = []\n  puts 'Input     :'\n  dimension.times do\n    input_matrix << gets.chomp.split.map(&:to_i)\n  end\n  begin\n    matrix = Matrix[*input_matrix]\n    puts \"Output    :\\n#{determinant(matrix)}\"\n  rescue ExceptionForMatrix::ErrDimensionMismatch => e\n    puts \"Error     : #{e.message}\"\n  end\nend\n```\n\n```swift\nimport Foundation\n\nvar matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nvar determinant = 0, counterForSign = 0\n\nfor index in 0..<3 {\n    var part1 = matrix[1]\n    var part2 = matrix[2]\n    part1.remove(at: index)\n    part2.remove(at: index)\n    let adj = (part1[0] * part2[1]) - (part1[1] * part2[0])\n    if (counterForSign == 0) {\n        determinant += matrix[0][index] * adj\n        counterForSign += 1\n    } else {\n        determinant -= matrix[0][index] * adj\n        counterForSign -= 1\n    }\n}\n\nprint(determinant)\n```\n\n```ts\nconst determinant = (m: any[])=> \n  m.length == 1 ?\n  m[0][0] :\n  m.length == 2 ? \n  m[0][0]*m[1][1]-m[0][1]*m[1][0] :\n  m[0].reduce((r: number,e: number,i: number) => \n    r+(-1)**(i+2)*e*determinant(m.slice(1).map((c: any[]) => \n      c.filter((_,j) => i != j))),0)\n\nconst test = [[1,2,3],[4,5,6],[7,8,9]] // 0\n\nconsole.log(determinant(test))\n```\n\n```py\nfrom array import ArrayType\n\nimport numpy as np\n\n\ndef create_line(i: int) -> ArrayType:\n    line_i = input(f\"Line {i}: \").split()\n    return np.array(line_i, dtype=float)\n\n\nn = int(input(\"Matrix Dimension: \"))\nmatrix = [create_line(i) for i in range(n)]\n\nprint(np.linalg.det(matrix))\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i, j int\n\tvar det [3][3]int\n\tfor i = 0; i < 3; i++ {\n\t\tfor j = 0; j < 3; j++ {\n\t\t\tfmt.Scan(&det[i][j])\n\t\t}\n\t}\n\tx := (det[1][1] * det[2][2]) - (det[2][1] * det[1][2])\n\ty := (det[1][0] * det[2][2]) - (det[2][0] * det[1][2])\n\tz := (det[1][0] * det[2][1]) - (det[2][0] * det[1][1])\n\tans := (det[0][0] * x) - (det[0][1] * y) + (det[0][2] * z)\n\tfmt.Println(ans)\n}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i, j int\n\tvar det [3][3]int\n\tfor i = 0; i < 3; i++ {\n\t\tfor j = 0; j < 3; j++ {\n\t\t\tfmt.Scan(&det[i][j])\n\t\t}\n\t}\n\tx := (det[1][1] * det[2][2]) - (det[2][1] * det[1][2])\n\ty := (det[1][0] * det[2][2]) - (det[2][0] * det[1][2])\n\tz := (det[1][0] * det[2][1]) - (det[2][0] * det[1][1])\n\tans := (det[0][0] * x) - (det[0][1] * y) + (det[0][2] * z)\n\tfmt.Println(ans)\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-02-25T04:39:15Z"}