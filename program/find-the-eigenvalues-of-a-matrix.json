{"slug":"find-the-eigenvalues-of-a-matrix","title":"Find the eigenvalues of a matrix","trackId":5575,"tags":["C","C#","Java","JavaScript","Swift","TypeScript","Python","Rust"],"contributors":["RedArchfiend955","ANUSHRAV01","harshraj8843","patel-aum","vikasgond807","aarishmkhan","Heyeso","ShadyResurrected","anandfresh"],"contentHtml":"<h2>Write a program to find the eigenvalues of a matrix</h2>\n<p>The eigenvalues and eigenvectors of a linear transformation are the values and vectors that determine the transformation. The eigenvalues of a matrix A are the values 位 for which the matrix equation Av = 位v has a non-trivial solution.</p>\n<pre><code>Input  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n16.116843969807043\n-1.1168439698070427\n0.9999999999999998\n</code></pre>\n<hr>\n<pre><code>#include math.h\n#include stdio.h\n\n#define MAX_ITER 100\n#define TOLERANCE 1e-6\n\nvoid jacobi(double a[][3], int n)\n{\n    int i, j, k;\n    double b[3], c[3], sum, tmp;\n\n    for (k = 0; k &#x3C; MAX_ITER; k++)\n    {\n        for (i = 0; i &#x3C; n; i++)\n        {\n            for (j = 0; j &#x3C; n; j++)\n            {\n                if (i != j)\n                {\n                    sum = 0.0;\n                    for (int l = 0; l &#x3C; n; l++)\n                        if (l != i &#x26;&#x26; l != j)\n                            sum += fabs(a[i][l] * a[l][j]);\n\n                    if (fabs(a[i][j]) > TOLERANCE + sum)\n                    {\n                        tmp = (a[j][j] - a[i][i]) / (2 * a[i][j]);\n                        b[i] = tmp + sqrt(1.0 + tmp * tmp);\n                        b[j] = tmp - sqrt(1.0 + tmp * tmp);\n\n                        for (int l = 0; l &#x3C; n; l++)\n                        {\n                            if (l != i &#x26;&#x26; l != j)\n                            {\n                                c[l] = a[l][i] / b[i];\n                                a[l][j] = a[l][j] / b[j];\n                            }\n                        }\n\n                        for (int l = 0; l &#x3C; n; l++)\n                        {\n                            if (l != i &#x26;&#x26; l != j)\n                            {\n                                a[i][l] = a[l][i] * b[j];\n                                a[l][j] = c[l] * b[i];\n                            }\n                        }\n\n                        a[i][j] = -a[i][j] * b[i] * b[j];\n                    }\n                }\n            }\n        }\n    }\n\n    printf(\"Eigenvalues: \");\n    for (i = 0; i &#x3C; n; i++)\n        printf(\"%.6lf \", a[i][i]);\n}\n\nint main()\n{\n    double a[3][3] = {{2, 1, 1},\n                      {1, 2, 1},\n                      {1, 1, 2}};\n    int n = 3;\n\n    jacobi(a, n);\n\n    return 0;\n}\n</code></pre>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Eigenvalues\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[,] matrix = new int[3, 3];\n            int i, j;\n            Console.WriteLine(\"Enter the 9 elements of the matrix: \");\n            for (i = 0; i &#x3C; 3; i++)\n            {\n                for (j = 0; j &#x3C; 3; j++)\n                {\n                    matrix[i, j] = Convert.ToInt32(Console.ReadLine());\n                }\n            }\n            Console.WriteLine(\"The matrix is: \");\n            for (i = 0; i &#x3C; 3; i++)\n            {\n                Console.WriteLine();\n                for (j = 0; j &#x3C; 3; j++)\n                {\n                    Console.Write(\"\\t\" + matrix[i, j]);\n                }\n            }\n            Console.WriteLine(\"\\nThe eigenvalues of the matrix are: \");\n            for (i = 0; i &#x3C; 3; i++)\n            {\n                Console.WriteLine((matrix[0, 0] + matrix[1, 1] + matrix[2, 2]) - (matrix[0, i] + matrix[1, i] + matrix[2, i]));\n            }\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>\n<pre><code>import java.util.Arrays;\n\npublic class FindTheEigenvaluesOfAMatrix {\n    public static void main(String[] args) {\n        // Read the input matrix\n        Scanner scanner = new Scanner(System.in);\n        double[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\n        // Calculate the eigenvalues\n        double[] eigenvalues = calculateEigenvalues(matrix);\n\n        // Print the eigenvalues\n        System.out.println(Arrays.toString(eigenvalues));\n    }\n\n    public static double[] calculateEigenvalues(double[][] matrix) {\n        // Create the companion matrix\n        double[][] companionMatrix = createCompanionMatrix(matrix);\n\n        // Calculate the eigenvalues of the companion matrix\n        double[] eigenvalues = calculateEigenvalues(companionMatrix);\n\n        return eigenvalues;\n    }\n\n    public static double[][] createCompanionMatrix(double[][] matrix) {\n        // Get the size of the matrix\n        int size = matrix.length;\n\n        // Create the companion matrix\n        double[][] companionMatrix = new double[size][size];\n        for (int i = 0; i &#x3C; size; i++) {\n            for (int j = 0; j &#x3C; size; j++) {\n                if (i &#x3C; size - 1) {\n                    companionMatrix[i][j] = -matrix[i + 1][j] / matrix[i][0];\n                } else {\n                    companionMatrix[i][j] = 0;\n                }\n            }\n        }\n\n        return companionMatrix;\n    }\n}\n</code></pre>\n<pre><code>import { eigs, round } from \"mathjs\";\n\n/* Sample matrix. */\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n/* Destructuring the object returned by `eigs(matrix)` and assigning the `values` property to the\nvariable `eigenvalues`. */\nconst { values } = eigs(matrix);\n/* Rounding the eigenvalues to 15 decimal places. */\nconst eigenvalues = values.map() (\n  round(num, 15)\n);\n\nconsole.log(eigenvalues); // Expected: [ 1e-15, -1.116843969807044, 16.116843969807043 ]\n</code></pre>\n<pre><code>import Foundation\n\nfunc eigenvalues(ofMatrix matrix: [[Double]]) -> [Double] {\n    let size = matrix.count\n    var a = matrix\n    var q = Array(repeating: Array(repeating: 0.0, count: size), count: size)\n    for i in 0..&#x3C;size {\n        q[i][i] = 1.0\n    }\n\n    for i in 0..&#x3C;50 {\n        var maxIndex = i\n        var maxValue = abs(a[i][i])\n        for row in i + 1..&#x3C;size {\n            if abs(a[row][i]) > maxValue {\n                maxIndex = row\n                maxValue = abs(a[row][i])\n            }\n        }\n\n        if maxValue &#x3C; 1e-10 {\n            break\n        }\n\n        if maxIndex != i {\n            (a[i], a[maxIndex]) = (a[maxIndex], a[i])\n            (q[i], q[maxIndex]) = (q[maxIndex], q[i])\n        }\n\n        for row in i + 1..&#x3C;size {\n            let factor = a[row][i] / a[i][i]\n            for col in i..&#x3C;size {\n                a[row][col] -= factor * a[i][col]\n            }\n            for col in 0..&#x3C;size {\n                q[row][col] -= factor * q[i][col]\n            }\n        }\n    }\n\n    var eigenValues = [Double](repeating: 0.0, count: size)\n    for i in 0..&#x3C;size {\n        eigenValues[i] = a[i][i]\n    }\n\n    return eigenValues\n}\n\nfunc getInput() -> [[Double]] {\n    let rows = 3\n    print(\"Input:\")\n    var matrix = [[Double]](repeating: [Double](repeating: 0.0, count: rows), count: rows)\n    for i in 0..&#x3C;rows {\n        let values = readLine()!.split(separator: \" \").map { Double($0)! }\n        matrix[i] = Array(values)\n    }\n    return matrix\n}\n\nlet matrix = getInput()\nlet eigenValues = eigenvalues(ofMatrix: matrix)\nprint(\"Output: \\(eigenValues)\")\n</code></pre>\n<pre><code>import { eigs, MathNumericType, round } from \"mathjs\";\n\n/* Sample matrix. */\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n/* Destructuring the object returned by `eigs(matrix)` and assigning the `values` property to the\nvariable `eigenvalues`. */\nconst { values } = eigs(matrix);\n/* Rounding the eigenvalues to 15 decimal places. */\nconst eigenvalues = values.map((num: MathNumericType | MathNumericType[]) =>\n  round(num, 15)\n);\n\nconsole.log(eigenvalues); // Expected: [ 1e-15, -1.116843969807044, 16.116843969807043 ]\n</code></pre>\n<pre><code>import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nw, v = np.linalg.eig(arr)\n\n[print(x) for x in np.round(w, decimals=4)]\n</code></pre>\n<pre><code>use ndarray::{Array1, Array2};\nuse ndarray_linalg::Eigen;\n\nfn main() {\n    // Read the matrix from standard input\n    let mut input = String::new();\n    std::io::stdin().read_line(&#x26;mut input).unwrap();\n    let matrix: Array2&#x3C;f64> = input.trim().split(';')\n        .map(|row| row.trim().split(' ')\n            .map(|val| val.parse().unwrap())\n            .collect::&#x3C;Vec&#x3C;f64>>())\n        .collect::&#x3C;Vec&#x3C;Vec&#x3C;f64>>>()\n        .into_iter()\n        .map(|row| row.into_iter().collect::&#x3C;Array1&#x3C;f64>>())\n        .collect::&#x3C;Array2&#x3C;f64>>();\n\n    // Calculate the eigenvalues\n    let eigenvalues = matrix.eigvals().unwrap();\n\n    // Print the eigenvalues to standard output\n    for (i, &#x26;value) in eigenvalues.iter().enumerate() {\n        println!(\"Eigenvalue {}: {}\", i, value);\n    }\n}\n</code></pre>\n","markdown":"\n## Write a program to find the eigenvalues of a matrix\n\nThe eigenvalues and eigenvectors of a linear transformation are the values and vectors that determine the transformation. The eigenvalues of a matrix A are the values 位 for which the matrix equation Av = 位v has a non-trivial solution.\n\n```txt\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n16.116843969807043\n-1.1168439698070427\n0.9999999999999998\n```\n\n---\n\n<CodeBlock slug=\"find-the-eigenvalues-of-a-matrix\" >\n\n```c\n#include math.h\n#include stdio.h\n\n#define MAX_ITER 100\n#define TOLERANCE 1e-6\n\nvoid jacobi(double a[][3], int n)\n{\n    int i, j, k;\n    double b[3], c[3], sum, tmp;\n\n    for (k = 0; k < MAX_ITER; k++)\n    {\n        for (i = 0; i < n; i++)\n        {\n            for (j = 0; j < n; j++)\n            {\n                if (i != j)\n                {\n                    sum = 0.0;\n                    for (int l = 0; l < n; l++)\n                        if (l != i && l != j)\n                            sum += fabs(a[i][l] * a[l][j]);\n\n                    if (fabs(a[i][j]) > TOLERANCE + sum)\n                    {\n                        tmp = (a[j][j] - a[i][i]) / (2 * a[i][j]);\n                        b[i] = tmp + sqrt(1.0 + tmp * tmp);\n                        b[j] = tmp - sqrt(1.0 + tmp * tmp);\n\n                        for (int l = 0; l < n; l++)\n                        {\n                            if (l != i && l != j)\n                            {\n                                c[l] = a[l][i] / b[i];\n                                a[l][j] = a[l][j] / b[j];\n                            }\n                        }\n\n                        for (int l = 0; l < n; l++)\n                        {\n                            if (l != i && l != j)\n                            {\n                                a[i][l] = a[l][i] * b[j];\n                                a[l][j] = c[l] * b[i];\n                            }\n                        }\n\n                        a[i][j] = -a[i][j] * b[i] * b[j];\n                    }\n                }\n            }\n        }\n    }\n\n    printf(\"Eigenvalues: \");\n    for (i = 0; i < n; i++)\n        printf(\"%.6lf \", a[i][i]);\n}\n\nint main()\n{\n    double a[3][3] = {{2, 1, 1},\n                      {1, 2, 1},\n                      {1, 1, 2}};\n    int n = 3;\n\n    jacobi(a, n);\n\n    return 0;\n}\n```\n\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Eigenvalues\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[,] matrix = new int[3, 3];\n            int i, j;\n            Console.WriteLine(\"Enter the 9 elements of the matrix: \");\n            for (i = 0; i < 3; i++)\n            {\n                for (j = 0; j < 3; j++)\n                {\n                    matrix[i, j] = Convert.ToInt32(Console.ReadLine());\n                }\n            }\n            Console.WriteLine(\"The matrix is: \");\n            for (i = 0; i < 3; i++)\n            {\n                Console.WriteLine();\n                for (j = 0; j < 3; j++)\n                {\n                    Console.Write(\"\\t\" + matrix[i, j]);\n                }\n            }\n            Console.WriteLine(\"\\nThe eigenvalues of the matrix are: \");\n            for (i = 0; i < 3; i++)\n            {\n                Console.WriteLine((matrix[0, 0] + matrix[1, 1] + matrix[2, 2]) - (matrix[0, i] + matrix[1, i] + matrix[2, i]));\n            }\n            Console.ReadLine();\n        }\n    }\n}\n```\n\n```java\nimport java.util.Arrays;\n\npublic class FindTheEigenvaluesOfAMatrix {\n    public static void main(String[] args) {\n        // Read the input matrix\n        Scanner scanner = new Scanner(System.in);\n        double[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\n        // Calculate the eigenvalues\n        double[] eigenvalues = calculateEigenvalues(matrix);\n\n        // Print the eigenvalues\n        System.out.println(Arrays.toString(eigenvalues));\n    }\n\n    public static double[] calculateEigenvalues(double[][] matrix) {\n        // Create the companion matrix\n        double[][] companionMatrix = createCompanionMatrix(matrix);\n\n        // Calculate the eigenvalues of the companion matrix\n        double[] eigenvalues = calculateEigenvalues(companionMatrix);\n\n        return eigenvalues;\n    }\n\n    public static double[][] createCompanionMatrix(double[][] matrix) {\n        // Get the size of the matrix\n        int size = matrix.length;\n\n        // Create the companion matrix\n        double[][] companionMatrix = new double[size][size];\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                if (i < size - 1) {\n                    companionMatrix[i][j] = -matrix[i + 1][j] / matrix[i][0];\n                } else {\n                    companionMatrix[i][j] = 0;\n                }\n            }\n        }\n\n        return companionMatrix;\n    }\n}\n```\n\n```js\nimport { eigs, round } from \"mathjs\";\n\n/* Sample matrix. */\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n/* Destructuring the object returned by `eigs(matrix)` and assigning the `values` property to the\nvariable `eigenvalues`. */\nconst { values } = eigs(matrix);\n/* Rounding the eigenvalues to 15 decimal places. */\nconst eigenvalues = values.map() (\n  round(num, 15)\n);\n\nconsole.log(eigenvalues); // Expected: [ 1e-15, -1.116843969807044, 16.116843969807043 ]\n```\n\n```swift\nimport Foundation\n\nfunc eigenvalues(ofMatrix matrix: [[Double]]) -> [Double] {\n    let size = matrix.count\n    var a = matrix\n    var q = Array(repeating: Array(repeating: 0.0, count: size), count: size)\n    for i in 0..<size {\n        q[i][i] = 1.0\n    }\n\n    for i in 0..<50 {\n        var maxIndex = i\n        var maxValue = abs(a[i][i])\n        for row in i + 1..<size {\n            if abs(a[row][i]) > maxValue {\n                maxIndex = row\n                maxValue = abs(a[row][i])\n            }\n        }\n\n        if maxValue < 1e-10 {\n            break\n        }\n\n        if maxIndex != i {\n            (a[i], a[maxIndex]) = (a[maxIndex], a[i])\n            (q[i], q[maxIndex]) = (q[maxIndex], q[i])\n        }\n\n        for row in i + 1..<size {\n            let factor = a[row][i] / a[i][i]\n            for col in i..<size {\n                a[row][col] -= factor * a[i][col]\n            }\n            for col in 0..<size {\n                q[row][col] -= factor * q[i][col]\n            }\n        }\n    }\n\n    var eigenValues = [Double](repeating: 0.0, count: size)\n    for i in 0..<size {\n        eigenValues[i] = a[i][i]\n    }\n\n    return eigenValues\n}\n\nfunc getInput() -> [[Double]] {\n    let rows = 3\n    print(\"Input:\")\n    var matrix = [[Double]](repeating: [Double](repeating: 0.0, count: rows), count: rows)\n    for i in 0..<rows {\n        let values = readLine()!.split(separator: \" \").map { Double($0)! }\n        matrix[i] = Array(values)\n    }\n    return matrix\n}\n\nlet matrix = getInput()\nlet eigenValues = eigenvalues(ofMatrix: matrix)\nprint(\"Output: \\(eigenValues)\")\n```\n\n```ts\nimport { eigs, MathNumericType, round } from \"mathjs\";\n\n/* Sample matrix. */\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n/* Destructuring the object returned by `eigs(matrix)` and assigning the `values` property to the\nvariable `eigenvalues`. */\nconst { values } = eigs(matrix);\n/* Rounding the eigenvalues to 15 decimal places. */\nconst eigenvalues = values.map((num: MathNumericType | MathNumericType[]) =>\n  round(num, 15)\n);\n\nconsole.log(eigenvalues); // Expected: [ 1e-15, -1.116843969807044, 16.116843969807043 ]\n```\n\n```py\nimport numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nw, v = np.linalg.eig(arr)\n\n[print(x) for x in np.round(w, decimals=4)]\n```\n\n```rs\nuse ndarray::{Array1, Array2};\nuse ndarray_linalg::Eigen;\n\nfn main() {\n    // Read the matrix from standard input\n    let mut input = String::new();\n    std::io::stdin().read_line(&mut input).unwrap();\n    let matrix: Array2<f64> = input.trim().split(';')\n        .map(|row| row.trim().split(' ')\n            .map(|val| val.parse().unwrap())\n            .collect::<Vec<f64>>())\n        .collect::<Vec<Vec<f64>>>()\n        .into_iter()\n        .map(|row| row.into_iter().collect::<Array1<f64>>())\n        .collect::<Array2<f64>>();\n\n    // Calculate the eigenvalues\n    let eigenvalues = matrix.eigvals().unwrap();\n\n    // Print the eigenvalues to standard output\n    for (i, &value) in eigenvalues.iter().enumerate() {\n        println!(\"Eigenvalue {}: {}\", i, value);\n    }\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-02-26T10:40:25Z"}