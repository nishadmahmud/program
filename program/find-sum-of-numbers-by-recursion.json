{"slug":"find-sum-of-numbers-by-recursion","title":"Find sum of numbers by recursion","trackId":3322,"tags":["C","Java","JavaScript","Python","Scala","Scala"],"contributors":["harshraj8843","esivakumar18","Osher160","joao-vitor-souza","rksp25","Greeshma-frontier"],"contentHtml":"<h2>Write a program to find sum of numbers by recursion</h2>\n<pre><code>Input  : 1 2 3 4 5\nOutput : 15\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h> /* scanf, printf */\n#include &#x3C;stdlib.h> /*malloc, free*/\n\nint FindSum(int *arr,int size);\nvoid InitArr(int *arr,int size);\nint main()\n{\n    int *arr = NULL;\n    int size = 0;\n    printf(\"how many  elements you want to insert?\\n\");\n    if(1 != scanf(\"%d\",&#x26;size))\n    {\n        return -1;\n    }\n\n    arr = (int *)malloc(size * sizeof(int));\n\n    if (arr == NULL)\n    {\n        return -1;\n    }\n\n    InitArr(arr,size);\n\n    printf(\"%d\\n\",FindSum(arr,size));\n\n    free(arr);\n\n    return 0;\n}\n\nvoid InitArr(int *arr,int size)\n{\n    int i = 0;\n    printf(\"please enter all of the elements:\\n\");\n\n    for(i = 0; i &#x3C; size; ++i)\n    {\n        if(scanf(\"%d\",arr + i)!= 1)\n        {\n            free(arr);\n            exit(1);\n        }\n    }\n}\n\n\nint FindSum(int *arr,int size)\n{\n    if (size == 1)\n    {\n        return arr[0];\n    }\n\n    return arr[size -1] + FindSum(arr,size -1);\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class FindSumOfNumbersByRecursion {\n\n    static int sum_of_digit(int n) {\n        if (n == 0)\n            return 0;\n        return (n % 10 + sum_of_digit(n / 10));\n    }\n\n    public static void main(String args[]) {\n        Scanner my_scanner = new Scanner(System.in);\n        System.out.print(\"Input : \");\n        int num = my_scanner.nextInt();;\n        int result = sum_of_digit(num);\n        System.out.println(\"Sum of digits in \" + num + \" is \" + result);\n    }\n}\n</code></pre>\n<pre><code>function sumOfNumbersByRecursion(num) {\n    let sum = 0;\n    if (num > 0) {\n        sum = (num % 10) + sumOfNumbersByRecursion(Math.floor(num / 10));\n    }\n    return sum;\n}\n\nconsole.log(sumOfNumbersByRecursion(12345));\n</code></pre>\n<pre><code>from typing import List\n\n\ndef recursive_sum(numbers: List[int]) -> int:\n    if len(numbers) != 0:\n        return numbers[-1] + recursive_sum(numbers[:-1])\n    return 0\n\n\nprint(recursive_sum([1, 2, 3, 4, 5]))  # Output: 15\n</code></pre>\n<pre><code>object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t  val number = scala.io.StdIn.readInt();\n\t  println(sum(number));\n\t}\n\n\tdef sum(n: Int): Int = {\n   if (n == 0)\n    return 0;\n   else\n    return n + sum(n-1)\n }\n}\n</code></pre>\n<pre><code>object HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t  val number = scala.io.StdIn.readInt();\n\t  println(sum(number));\n\t}\n\n\tdef sum(n: Int): Int = {\n   if (n == 0)\n    return 0;\n   else\n    return n + sum(n-1)\n }\n}\n</code></pre>\n","markdown":"\n## Write a program to find sum of numbers by recursion\n\n```txt\nInput  : 1 2 3 4 5\nOutput : 15\n```\n\n---\n\n<CodeBlock slug=\"find-sum-of-numbers-by-recursion\" >\n\n```c\n#include <stdio.h> /* scanf, printf */\n#include <stdlib.h> /*malloc, free*/\n\nint FindSum(int *arr,int size);\nvoid InitArr(int *arr,int size);\nint main()\n{\n    int *arr = NULL;\n    int size = 0;\n    printf(\"how many  elements you want to insert?\\n\");\n    if(1 != scanf(\"%d\",&size))\n    {\n        return -1;\n    }\n\n    arr = (int *)malloc(size * sizeof(int));\n\n    if (arr == NULL)\n    {\n        return -1;\n    }\n\n    InitArr(arr,size);\n\n    printf(\"%d\\n\",FindSum(arr,size));\n\n    free(arr);\n\n    return 0;\n}\n\nvoid InitArr(int *arr,int size)\n{\n    int i = 0;\n    printf(\"please enter all of the elements:\\n\");\n\n    for(i = 0; i < size; ++i)\n    {\n        if(scanf(\"%d\",arr + i)!= 1)\n        {\n            free(arr);\n            exit(1);\n        }\n    }\n}\n\n\nint FindSum(int *arr,int size)\n{\n    if (size == 1)\n    {\n        return arr[0];\n    }\n\n    return arr[size -1] + FindSum(arr,size -1);\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class FindSumOfNumbersByRecursion {\n\n    static int sum_of_digit(int n) {\n        if (n == 0)\n            return 0;\n        return (n % 10 + sum_of_digit(n / 10));\n    }\n\n    public static void main(String args[]) {\n        Scanner my_scanner = new Scanner(System.in);\n        System.out.print(\"Input : \");\n        int num = my_scanner.nextInt();;\n        int result = sum_of_digit(num);\n        System.out.println(\"Sum of digits in \" + num + \" is \" + result);\n    }\n}\n```\n\n```js\nfunction sumOfNumbersByRecursion(num) {\n    let sum = 0;\n    if (num > 0) {\n        sum = (num % 10) + sumOfNumbersByRecursion(Math.floor(num / 10));\n    }\n    return sum;\n}\n\nconsole.log(sumOfNumbersByRecursion(12345));\n```\n\n```py\nfrom typing import List\n\n\ndef recursive_sum(numbers: List[int]) -> int:\n    if len(numbers) != 0:\n        return numbers[-1] + recursive_sum(numbers[:-1])\n    return 0\n\n\nprint(recursive_sum([1, 2, 3, 4, 5]))  # Output: 15\n```\n\n```scala\nobject HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t  val number = scala.io.StdIn.readInt();\n\t  println(sum(number));\n\t}\n\n\tdef sum(n: Int): Int = {\n   if (n == 0)\n    return 0;\n   else\n    return n + sum(n-1)\n }\n}\n```\n\n```scala\nobject HelloWorld {\n\tdef main(args: Array[String]): Unit = {\n\t  val number = scala.io.StdIn.readInt();\n\t  println(sum(number));\n\t}\n\n\tdef sum(n: Int): Int = {\n   if (n == 0)\n    return 0;\n   else\n    return n + sum(n-1)\n }\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-06T04:31:08Z"}