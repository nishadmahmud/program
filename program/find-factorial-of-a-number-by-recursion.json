{"slug":"find-factorial-of-a-number-by-recursion","title":"Find factorial of a number by recursion","trackId":782,"tags":["C","C++","C#","Java","JavaScript","Kotlin","Ruby","Swift","TypeScript","Python","Scala","Swift","Scala","GO","PHP"],"contributors":["sancoLgates","harshraj8843","esivakumar18","Osher160","anandfresh","joao-vitor-souza","PraaneshSelvaraj","shivampipalwa","Greeshma-frontier","SRR-CODER","UsmanFani","imtiyaz786"],"contentHtml":"<h2>Write a program to find factorial of a number by recursion</h2>\n<p>Factorial of a number is the product of all the numbers from 1 to that number. For example, factorial of 5 is 5*4*3*2*1 = 120.</p>\n<pre><code>Input  : 5\nOutput : 120\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h> /* printf , scanf */\n\n/* assuming num >= 1 */\nint FactorialRec(int num);\n\nint main()\n{\n    int num = 0;\n    int is_good = scanf(\"%d\",&#x26;num);\n\n    if(is_good != 1)\n    {\n        return -1;\n    }\n\n    printf(\"%d\\n\",FactorialRec(num));\n\n    return 0;\n}\n\nint FactorialRec(int num)\n{\n    if(num == 1)\n    {\n        return 1;\n    }\n\n    return num * FactorialRec(num -1);\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n#include &#x3C;bits/stdc++.h>\nusing namespace std;\n\nint factorial(int n)\n{\n    if(n==0)\n    {\n        return 1;\n    }\n    return n*factorial(n-1);\n}\n\n\nint main() {\n\tint number;\n\tcin>>number;\n\tcout&#x3C;&#x3C;factorial(number)&#x3C;&#x3C;endl;\n\t\n\t\n\treturn 0;\n}\n</code></pre>\n<pre><code>using System;\nclass Factorial\n{\n    public static void Main()\n    {\n        int fact, num;\n        Console.Write(\"Enter a number: \");\n        num = Convert.ToInt32(Console.ReadLine());\n        Factorial obj = new Factorial();\n        fact = obj.factorial(num);\n        Console.WriteLine(\"Factorial of {0} is {1}\", num, fact);\n    }\n\n    public int factorial(int num)\n    {\n        if (num == 0)\n            return 1;\n        else\n            return num * factorial(num - 1);\n    }\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\r\n\r\n class FindFactorialOfANumberByRecursion {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tSystem.out.println(\"Enter a number: \");\r\n\t\tint number = input.nextInt();\r\n\t\t\r\n\t\tSystem.out.print(\"Factorial of the entered number is: \" + factorial(number));\r\n\t}\r\n\t\r\n\tstatic int factorial(int number) {\r\n\tif(number == 0)\r\n\t\treturn 1;\r\n\telse\r\n\t\treturn number * factorial(number - 1);\r\n\t}\r\n\t\r\n}\n</code></pre>\n<pre><code>function factorialize(num) {\n  if (num &#x3C; 0) { return -1 }\n    \n  // If the number is 0, its factorial is 1.\n  else if (num == 0) { return 1 }\n    \n  // Otherwise, call the recursive procedure again\n    else {\n        return ( num * factorialize(num - 1) );\n    }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5))\n</code></pre>\n<pre><code>class FindFactorialOfANumberByRecursion {\n\n    fun findFactorial(num: Int): Int {\n        if (num == 0) return 0\n        return findRecursive(num)\n    }\n\n    private fun findRecursive(num: Int): Int {\n        if (num == 1) return 1\n        return num * findRecursive(num - 1)\n    }\n}\n</code></pre>\n<pre><code>def fact(n)\n    return 1 if n==0\n\n    return n*fact(n-1)\nend\nprint \"Enter a number : \"\nnum = gets.chomp.to_i\nprint \"Factorial of #{num} : #{fact(num)}\"\n</code></pre>\n<pre><code>import Foundation\nimport Glibc\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Factorial: \", factorial(fNumber: number))\n\nfunc factorial(fNumber: Int) -> Int{\n   if fNumber == 0{\n      return 1\n   } else {\n      return fNumber * factorial(fNumber:fNumber-1)\n   }\n}\n</code></pre>\n<pre><code>function factorialize(num: number): number {\n  if (num &#x3C; 0) {return -1}\n    \n  // If the number is 0, its factorial is 1.\n  else if (num == 0) {return 1}\n    \n  // Otherwise, call the recursive procedure again\n    else {\n        return (num * factorialize(num - 1));\n    }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5))\n</code></pre>\n<pre><code># Python program to calculate factorial of number using recursion\ndef fact(x):\n    if x == 1 or x == 0:\n        return 1\n    else:\n        return x * fact(x - 1)  # using recursion\n\n\nn = int(input(\"Enter a number : \"))\n\nif n &#x3C; 0:\n    print(\"Factorial can not be calculated for negative numbers!\")\nelse:\n    print(\"Factorial of\", n, \"=\", fact(n))\n</code></pre>\n<pre><code>object HelloWorld {\n \tdef main(args: Array[String]): Unit = {\n \t  val number = scala.io.StdIn.readInt();\n \t  println(factorial(number));\n \t}\n \t\n \tdef factorial(n: Int): Int = {\n    if (n == 0)\n        return 1\n    else\n        return n * factorial(n-1)\n  }\n }\n</code></pre>\n<pre><code>import Foundation\nimport Glibc\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Factorial: \", factorial(fNumber: number))\n\nfunc factorial(fNumber: Int) -> Int{\n   if fNumber == 0{\n      return 1\n   } else {\n      return fNumber * factorial(fNumber:fNumber-1)\n   }\n}\n</code></pre>\n<pre><code>object HelloWorld {\n \tdef main(args: Array[String]): Unit = {\n \t  val number = scala.io.StdIn.readInt();\n \t  println(factorial(number));\n \t}\n \t\n \tdef factorial(n: Int): Int = {\n    if (n == 0)\n        return 1\n    else\n        return n * factorial(n-1)\n  }\n }\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc factorialize(num int) int {\n\tif (num &#x3C; 0) {\n\t\treturn -1;\n\t} else if (num == 0) {\n\t\treturn 1\n\t} else {\n\t\treturn num * factorialize(num - 1)\n\t}\n}\n\nfunc main() {\n\tvar i int\n\tfmt.Print(\"Enter Number: \")\n\tfmt.Scan(&#x26;i)\n\tfmt.Println(factorialize(i))\n}\n</code></pre>\n<pre><code>&#x3C;?php\nfunction factorial($n)\n{\n    if ($n &#x3C;= 1) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\necho factorial((int) readline()) . \"\\n\";\n\n?>\n</code></pre>\n","markdown":"\n## Write a program to find factorial of a number by recursion\n\nFactorial of a number is the product of all the numbers from 1 to that number. For example, factorial of 5 is 5\\*4\\*3\\*2\\*1 = 120.\n\n```txt\nInput  : 5\nOutput : 120\n```\n\n---\n\n<CodeBlock slug=\"find-factorial-of-a-number-by-recursion\" >\n\n```c\n#include <stdio.h> /* printf , scanf */\n\n/* assuming num >= 1 */\nint FactorialRec(int num);\n\nint main()\n{\n    int num = 0;\n    int is_good = scanf(\"%d\",&num);\n\n    if(is_good != 1)\n    {\n        return -1;\n    }\n\n    printf(\"%d\\n\",FactorialRec(num));\n\n    return 0;\n}\n\nint FactorialRec(int num)\n{\n    if(num == 1)\n    {\n        return 1;\n    }\n\n    return num * FactorialRec(num -1);\n}\n```\n\n```cpp\n#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint factorial(int n)\n{\n    if(n==0)\n    {\n        return 1;\n    }\n    return n*factorial(n-1);\n}\n\n\nint main() {\n\tint number;\n\tcin>>number;\n\tcout<<factorial(number)<<endl;\n\t\n\t\n\treturn 0;\n}\n```\n\n```cs\nusing System;\nclass Factorial\n{\n    public static void Main()\n    {\n        int fact, num;\n        Console.Write(\"Enter a number: \");\n        num = Convert.ToInt32(Console.ReadLine());\n        Factorial obj = new Factorial();\n        fact = obj.factorial(num);\n        Console.WriteLine(\"Factorial of {0} is {1}\", num, fact);\n    }\n\n    public int factorial(int num)\n    {\n        if (num == 0)\n            return 1;\n        else\n            return num * factorial(num - 1);\n    }\n}\n```\n\n```java\nimport java.util.Scanner;\r\n\r\n class FindFactorialOfANumberByRecursion {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tSystem.out.println(\"Enter a number: \");\r\n\t\tint number = input.nextInt();\r\n\t\t\r\n\t\tSystem.out.print(\"Factorial of the entered number is: \" + factorial(number));\r\n\t}\r\n\t\r\n\tstatic int factorial(int number) {\r\n\tif(number == 0)\r\n\t\treturn 1;\r\n\telse\r\n\t\treturn number * factorial(number - 1);\r\n\t}\r\n\t\r\n}\n```\n\n```js\nfunction factorialize(num) {\n  if (num < 0) { return -1 }\n    \n  // If the number is 0, its factorial is 1.\n  else if (num == 0) { return 1 }\n    \n  // Otherwise, call the recursive procedure again\n    else {\n        return ( num * factorialize(num - 1) );\n    }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5))\n```\n\n```kt\nclass FindFactorialOfANumberByRecursion {\n\n    fun findFactorial(num: Int): Int {\n        if (num == 0) return 0\n        return findRecursive(num)\n    }\n\n    private fun findRecursive(num: Int): Int {\n        if (num == 1) return 1\n        return num * findRecursive(num - 1)\n    }\n}\n```\n\n```rb\ndef fact(n)\n    return 1 if n==0\n\n    return n*fact(n-1)\nend\nprint \"Enter a number : \"\nnum = gets.chomp.to_i\nprint \"Factorial of #{num} : #{fact(num)}\"\n```\n\n```swift\nimport Foundation\nimport Glibc\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Factorial: \", factorial(fNumber: number))\n\nfunc factorial(fNumber: Int) -> Int{\n   if fNumber == 0{\n      return 1\n   } else {\n      return fNumber * factorial(fNumber:fNumber-1)\n   }\n}\n```\n\n```ts\nfunction factorialize(num: number): number {\n  if (num < 0) {return -1}\n    \n  // If the number is 0, its factorial is 1.\n  else if (num == 0) {return 1}\n    \n  // Otherwise, call the recursive procedure again\n    else {\n        return (num * factorialize(num - 1));\n    }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5))\n```\n\n```py\n# Python program to calculate factorial of number using recursion\ndef fact(x):\n    if x == 1 or x == 0:\n        return 1\n    else:\n        return x * fact(x - 1)  # using recursion\n\n\nn = int(input(\"Enter a number : \"))\n\nif n < 0:\n    print(\"Factorial can not be calculated for negative numbers!\")\nelse:\n    print(\"Factorial of\", n, \"=\", fact(n))\n```\n\n```scala\nobject HelloWorld {\n \tdef main(args: Array[String]): Unit = {\n \t  val number = scala.io.StdIn.readInt();\n \t  println(factorial(number));\n \t}\n \t\n \tdef factorial(n: Int): Int = {\n    if (n == 0)\n        return 1\n    else\n        return n * factorial(n-1)\n  }\n }\n```\n\n```swift\nimport Foundation\nimport Glibc\n\nprint(\"Enter number: \")\nvar number = Int(readLine()!)!\n\nprint(\"Factorial: \", factorial(fNumber: number))\n\nfunc factorial(fNumber: Int) -> Int{\n   if fNumber == 0{\n      return 1\n   } else {\n      return fNumber * factorial(fNumber:fNumber-1)\n   }\n}\n```\n\n```scala\nobject HelloWorld {\n \tdef main(args: Array[String]): Unit = {\n \t  val number = scala.io.StdIn.readInt();\n \t  println(factorial(number));\n \t}\n \t\n \tdef factorial(n: Int): Int = {\n    if (n == 0)\n        return 1\n    else\n        return n * factorial(n-1)\n  }\n }\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc factorialize(num int) int {\n\tif (num < 0) {\n\t\treturn -1;\n\t} else if (num == 0) {\n\t\treturn 1\n\t} else {\n\t\treturn num * factorialize(num - 1)\n\t}\n}\n\nfunc main() {\n\tvar i int\n\tfmt.Print(\"Enter Number: \")\n\tfmt.Scan(&i)\n\tfmt.Println(factorialize(i))\n}\n```\n\n```php\n<?php\nfunction factorial($n)\n{\n    if ($n <= 1) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\necho factorial((int) readline()) . \"\\n\";\n\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-03-07T07:32:42Z"}